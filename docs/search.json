[{"path":"https://geobosh.github.io/fGarchDoc/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Diethelm Wuertz. Author.            original code Yohan Chalabi. Author. Tobias Setz. Author. Martin Maechler. Author. Chris Boudt. Contributor. Pierre Chausse. Contributor. Michal Miklovac. Contributor. Georgi N. Boshnakov. Author, maintainer.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wuertz D, Chalabi Y, Setz T, Maechler M, Boshnakov GN (2024). fGarch: Rmetrics - Autoregressive Conditional Heteroskedastic Modelling. R package version 4040.92.9000, https://www.rmetrics.org (devel), https://geobosh.github.io/fGarchDoc/ (doc).","code":"@Manual{,   title = {fGarch: Rmetrics - Autoregressive Conditional Heteroskedastic Modelling},   author = {Diethelm Wuertz and Yohan Chalabi and Tobias Setz and Martin Maechler and Georgi N. Boshnakov},   year = {2024},   note = {R package version 4040.92.9000, https://www.rmetrics.org (devel)},   url = {https://geobosh.github.io/fGarchDoc/ (doc)}, }"},{"path":"https://geobosh.github.io/fGarchDoc/index.html","id":"installing-fgarch","dir":"","previous_headings":"","what":"Rmetrics - Autoregressive Conditional Heteroskedastic Modelling","title":"Rmetrics - Autoregressive Conditional Heteroskedastic Modelling","text":"Install latest stable version fGarch CRAN: can install development version fGarch R-forge: report bugs visit Rmetrics.","code":"install.packages(\"fGarch\") install.packages(\"fGarch\", repos = \"http://R-Forge.R-project.org\")"},{"path":"https://geobosh.github.io/fGarchDoc/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Rmetrics - Autoregressive Conditional Heteroskedastic Modelling","text":"can view documentation fGarch fGarchDoc download reference manual latest release CRAN. comprehensive overview models conditional distributions employed package fGarch, along worked examples, available following paper original authors package: WurtzEtAlGarch.pdf. (unpublished manuscript. online sources, confusingly, attribute JSS, vol 55, issue 2, seems taken placeholders VV II heading first page Roman numbers 55 2.)","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/00fGarch-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Modelling heterskedasticity in financial time series — fGarch-package","title":"Modelling heterskedasticity in financial time series — fGarch-package","text":"Rmetrics fGarch package collection functions   analyze model heteroskedastic behavior financial time series.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/00fGarch-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Modelling heterskedasticity in financial time series — fGarch-package","text":"Diethelm Wuertz [aut] (original code), Yohan Chalabi [aut], Tobias Setz [aut], Martin Maechler [ctb] (<https://orcid.org/0000-0002-8685-9910>), Chris Boudt [ctb] Pierre Chausse [ctb], Michal Miklovac [ctb], Georgi N. Boshnakov [cre, ctb] Maintainer: Georgi N. Boshnakov <georgi.boshnakov@manchester.ac.uk>","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/00fGarch-package.html","id":"-introduction","dir":"Reference","previous_headings":"","what":"1 Introduction","title":"Modelling heterskedasticity in financial time series — fGarch-package","text":"GARCH, Generalized Autoregressive Conditional Heteroskedastic, models    become important analysis time series data, particularly    financial applications goal analyze forecast    volatility. purpose, family GARCH functions offers functions   simulating, estimating forecasting various univariate GARCH-type   time series models conditional variance ARMA   specification conditional mean. function   garchFit numerical implementation maximum   log-likelihood approach different assumptions, Normal,   Student-t, GED errors skewed versions.  parameter   estimates checked several diagnostic analysis tools including   graphical features hypothesis tests. Functions compute n-step   ahead forecasts conditional mean variance also   available. number GARCH models immense, influential models    first. Beside standard ARCH model introduced Engle [1982]    GARCH model introduced Bollerslev [1986], function   garchFit also includes general class asymmetric power   ARCH models, named APARCH, introduced Ding, Granger Engle [1993].    APARCH models include special cases TS-GARCH model    Taylor [1986] Schwert [1989], GJR-GARCH model Glosten,    Jaganathan, Runkle [1993], T-ARCH model Zakoian [1993],    N-ARCH model Higgins Bera [1992], Log-ARCH model   Geweke [1986] Pentula [1986]. exist collection review articles Bollerslev, Chou    Kroner [1992], Bera Higgins [1993], Bollerslev, Engle   Nelson [1994], Engle [2001], Engle Patton [2001], Li, Ling    McAleer [2002] give good overview scope    research.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/00fGarch-package.html","id":"-time-series-simulation","dir":"Reference","previous_headings":"","what":"2 Time series simulation","title":"Modelling heterskedasticity in financial time series — fGarch-package","text":"Functions simulate artificial GARCH APARCH time series   processes.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/00fGarch-package.html","id":"-parameter-estimation","dir":"Reference","previous_headings":"","what":"3 Parameter estimation","title":"Modelling heterskedasticity in financial time series — fGarch-package","text":"Functions fit parameters GARCH APARCH time series   processes.","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/00fGarch-package.html","id":"-forecasting","dir":"Reference","previous_headings":"","what":"4 Forecasting","title":"Modelling heterskedasticity in financial time series — fGarch-package","text":"Functions forcecast mean variance GARCH APARCH   processes.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/00fGarch-package.html","id":"-standardized-distributions","dir":"Reference","previous_headings":"","what":"5 Standardized distributions","title":"Modelling heterskedasticity in financial time series — fGarch-package","text":"section contains functions model standardized distributions.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/00fGarch-package.html","id":"about-rmetrics","dir":"Reference","previous_headings":"","what":"About Rmetrics","title":"Modelling heterskedasticity in financial time series — fGarch-package","text":"fGarch Rmetrics package written educational      support teaching \"Computational Finance Financial Engineering\"      licensed GPL.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/VaR.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Value-at-Risk (VaR) and expected shortfall (ES) — VaR","title":"Compute Value-at-Risk (VaR) and expected shortfall (ES) — VaR","text":"Compute Value--Risk (VaR) Expected Shortfall (ES) fitted   GARCH-APARCH model.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/VaR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Value-at-Risk (VaR) and expected shortfall (ES) — VaR","text":"","code":"# S3 method for fGARCH VaR(dist, p_loss = 0.05, ..., tol)  # S3 method for fGARCH ES(dist, p_loss = 0.05, ...)"},{"path":"https://geobosh.github.io/fGarchDoc/reference/VaR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Value-at-Risk (VaR) and expected shortfall (ES) — VaR","text":"dist object class \"fGARCH\", obtained garchFit(). p_loss level, default 0.05. ... used. tol tollerance","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/VaR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Value-at-Risk (VaR) and expected shortfall (ES) — VaR","text":"provide methods generic functions cvar::VaR   cvar::ES.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/VaR.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute Value-at-Risk (VaR) and expected shortfall (ES) — VaR","text":"use traditional definition VaR negated lower   quantile. example, \\(X\\) returns asset,   VAR\\({}_\\alpha\\) = \\(-q_\\alpha\\),   \\(q_\\alpha\\) lower \\(\\alpha\\) quantile \\(X\\).   Equivalently, VAR\\({}_\\alpha\\) equal lower   \\(1-\\alpha\\) quantile \\(-X\\) (loss series).    details see vignette package cvar availalble   https://cran.r-project.org/package=cvar/vignettes/Guide_cvar.pdf   (calling vignette(\"Guide_cvar\", package = \"cvar\")). wish overlay VaR ES returns, just negate   VaR/ES, see examples.","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/VaR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Value-at-Risk (VaR) and expected shortfall (ES) — VaR","text":"","code":"## simulate a time series of returns x <- garchSim( garchSpec(), n = 500) class(x) #> [1] \"timeSeries\" #> attr(,\"package\") #> [1] \"timeSeries\" ## fit a GARCH model fit <- garchFit(~ garch(1, 1), data = x, trace = FALSE)  head(VaR(fit)) #>  2022-12-17  2022-12-18  2022-12-19  2022-12-20  2022-12-21  2022-12-22  #> 0.005215774 0.005132384 0.005135318 0.005073563 0.005363526 0.005243880  head(ES(fit)) #>  2022-12-17  2022-12-18  2022-12-19  2022-12-20  2022-12-21  2022-12-22  #> 0.006544763 0.006440189 0.006443868 0.006366425 0.006730050 0.006580009   ## use plot method for fitted GARCH models plot(fit, which = 14) # VaR  plot(fit, which = 15) # ES  plot(fit, which = 16) # VaR & ES  ## plot(fit) # choose the plot interactively  ## diy plots  ## overlay VaR and ES over returns ## here x is from class 'timeSeries', so we convert VaR/ES to timeSeries ## don't forget to negate the result of VaR()/ES(), plot(x) lines(timeSeries(-VaR(fit)), col = \"red\") lines(timeSeries(-ES(fit)), col = \"blue\")   ## alternatively, plot losses (rather than returns) and don't negate VaR()/ES() plot(-x) lines(timeSeries(VaR(fit)), col = \"red\") lines(timeSeries(ES(fit)), col = \"blue\")"},{"path":"https://geobosh.github.io/fGarchDoc/reference/class-fGARCH.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Class 'fGARCH' represents models fitted heteroskedastic time   series, including ARCH, GARCH, APARCH, ARMA-GARCH ARMA-APARCH   models.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/class-fGARCH.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Objects class \"fGARCH\" can created calls   function garchFit.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/class-fGARCH.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"call: Object class \"call\",       call used fit model create object. formula: Object class \"formula\",       formula object representing mean variance equations. method: Object class \"character\",       string denoting optimization method, default       \"Max Log-Likelihood Estimation\". data: Object class \"list\",       list one entry, x, containing data       time series model fitted. fit: Object class \"list\",       list results parameter estimation. entries       list depend selected algorithm, see . residuals: Object class \"numeric\",       raw, unstandardized residuals. fitted: Object class \"numeric\",       fitted values. h.t: Object class \"numeric\",       conditional variances (\\(h_t = \\sigma_t^\\delta\\)). sigma.t: Object class \"numeric\",       conditional standard deviations. title: Object class \"character\",       title string. description: Object class \"character\",       string brief description.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/class-fGARCH.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class ","text":"Besides S4 methods described , \"fGARCH\"   methods (S3) tsdiag (tsdiag), VaR   (VaR), expected shortfall (ES), volatility   (volatility), maybe others.  plot signature(x = \"fGARCH\", y = \"missing\"):        plots object class \"fGARCH\", see       help page method       details options. show signature(object = \"fGARCH\"):        prints object. summary signature(object = \"fGARCH\"):       summarizes object. help       page \"fGARCH\" method gives details output,       well interpretation results. predict signature(object = \"fGARCH\"):       Computes forecasts mean measures risk (      volatility, value--risk expected shortfall), see       method's help page full       details. fitted signature(object = \"fGARCH\"):       extracts fitted values object       (help page). residuals signature(object = \"fGARCH\"):       returns residuals fitted model       (help page). coef signature(object = \"fGARCH\"):       extracts estimated coefficients       (help page). formula signature(x = \"fGARCH\"):       extracts formula expression, see method's       help page. update signature(object = \"fGARCH\"):       ...","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/class-fGARCH.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Diethelm Wuertz Rmetrics Core Team","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/class-fGARCH.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"## simulate a time series, fit a GARCH(1,1) model, and show it: x <- garchSim( garchSpec(), n = 500) fit <- garchFit(~ garch(1, 1), data = x, trace = FALSE) coef(fit) #>            mu         omega        alpha1         beta1  #> -1.194161e-04  1.333768e-06  9.172218e-02  7.721106e-01  summary(fit) #>  #> Title: #>  GARCH Modelling  #>  #> Call: #>  garchFit(formula = ~garch(1, 1), data = x, trace = FALSE)  #>  #> Mean and Variance Equation: #>  data ~ garch(1, 1) #> <environment: 0x569a0ca3e748> #>  [data = x] #>  #> Conditional Distribution: #>  norm  #>  #> Coefficient(s): #>          mu        omega       alpha1        beta1   #> -1.1942e-04   1.3338e-06   9.1722e-02   7.7211e-01   #>  #> Std. Errors: #>  based on Hessian  #>  #> Error Analysis: #>          Estimate  Std. Error  t value Pr(>|t|)     #> mu     -1.194e-04   1.333e-04   -0.896   0.3704     #> omega   1.334e-06   8.414e-07    1.585   0.1129     #> alpha1  9.172e-02   4.152e-02    2.209   0.0272 *   #> beta1   7.721e-01   1.079e-01    7.155 8.35e-13 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Log Likelihood: #>  2185.102    normalized:  4.370204  #>  #> Description: #>  Tue Apr 30 14:51:44 2024 by user: georgi  #>  #>  #> Standardised Residuals Tests: #>                                  Statistic    p-Value #>  Jarque-Bera Test   R    Chi^2   0.7057469 0.70266612 #>  Shapiro-Wilk Test  R    W       0.9979112 0.80185098 #>  Ljung-Box Test     R    Q(10)  18.0066406 0.05485173 #>  Ljung-Box Test     R    Q(15)  24.8843921 0.05151773 #>  Ljung-Box Test     R    Q(20)  26.4473832 0.15153936 #>  Ljung-Box Test     R^2  Q(10)  13.6251846 0.19078464 #>  Ljung-Box Test     R^2  Q(15)  15.4841586 0.41713680 #>  Ljung-Box Test     R^2  Q(20)  20.1909770 0.44604161 #>  LM Arch Test       R    TR^2   13.1132258 0.36086497 #>  #> Information Criterion Statistics: #>       AIC       BIC       SIC      HQIC  #> -8.724407 -8.690690 -8.724534 -8.711177  #>  fit # == print(fit) and also == show(fit) #>  #> Title: #>  GARCH Modelling  #>  #> Call: #>  garchFit(formula = ~garch(1, 1), data = x, trace = FALSE)  #>  #> Mean and Variance Equation: #>  data ~ garch(1, 1) #> <environment: 0x569a0ca3e748> #>  [data = x] #>  #> Conditional Distribution: #>  norm  #>  #> Coefficient(s): #>          mu        omega       alpha1        beta1   #> -1.1942e-04   1.3338e-06   9.1722e-02   7.7211e-01   #>  #> Std. Errors: #>  based on Hessian  #>  #> Error Analysis: #>          Estimate  Std. Error  t value Pr(>|t|)     #> mu     -1.194e-04   1.333e-04   -0.896   0.3704     #> omega   1.334e-06   8.414e-07    1.585   0.1129     #> alpha1  9.172e-02   4.152e-02    2.209   0.0272 *   #> beta1   7.721e-01   1.079e-01    7.155 8.35e-13 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Log Likelihood: #>  2185.102    normalized:  4.370204  #>  #> Description: #>  Tue Apr 30 14:51:44 2024 by user: georgi  #>"},{"path":"https://geobosh.github.io/fGarchDoc/reference/class-fGARCHSPEC.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Specification structure univariate GARCH time series model.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/class-fGARCHSPEC.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Objects can created calls function garchSpec.   object specifies parameters empirical GARCH process.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/class-fGARCHSPEC.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"call: Object class \"call\":        call garch function. formula: Object class \"formula\":        list two formula entries mean variance        equation. model: Object class \"list\":        list model parameters. presample: Object class \"matrix\":        numeric matrix presample values. distribution: Object class \"character\":        character string name conditional distribution. rseed: Object class \"numeric\":        integer random number generator seed.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/class-fGARCHSPEC.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class ","text":"show signature(object = \"fGARCHSPEC\"):        prints object class 'fGARCHSPEC'.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/class-fGARCHSPEC.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Class ","text":"Rmetrics Version 2.6.1 class renamed   \"garchSpec\" \"fGARCHSPEC\".","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/class-fGARCHSPEC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/class-fGARCHSPEC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"## garchSpec -    spec = garchSpec()    spec # print() or show() it #>  #> Formula:  #>  ~ garch(1, 1) #> Model: #>  omega: 1e-06 #>  alpha: 0.1 #>  beta:  0.8 #> Distribution:  #>  norm #> Presample:  #>   time         z     h y #> 1    0 -1.069553 1e-05 0"},{"path":"https://geobosh.github.io/fGarchDoc/reference/class-fUGARCHSPEC.html","id":null,"dir":"Reference","previous_headings":"","what":"Class 'fUGARCHSPEC' — fUGARCHSPEC-class","title":"Class 'fUGARCHSPEC' — fUGARCHSPEC-class","text":"Class 'fUGARCHSPEC'.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/class-fUGARCHSPEC.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class 'fUGARCHSPEC' — fUGARCHSPEC-class","text":"Objects can created calls form new(\"fUGARCHSPEC\", ...).","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/class-fUGARCHSPEC.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class 'fUGARCHSPEC' — fUGARCHSPEC-class","text":"model: Object class \"list\" ~~ distribution: Object class \"list\" ~~ optimization: Object class \"list\" ~~ documentation: Object class \"list\" ~~","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/class-fUGARCHSPEC.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class 'fUGARCHSPEC' — fUGARCHSPEC-class","text":"methods defined class \"fUGARCHSPEC\" signature.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/class-fUGARCHSPEC.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Class 'fUGARCHSPEC' — fUGARCHSPEC-class","text":"class meant replace \"fGARCHSPEC\"? (GNB) class seems meant internal use package. (GNB) Amendment: , functions .ugarchSpec         .ugarchFit exported. .ugarchFit fits model         spec, unlike garchFit. TODO: something unfinished . Check sort . See also         fUGARCHSPEC-class","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/class-fUGARCHSPEC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class 'fUGARCHSPEC' — fUGARCHSPEC-class","text":"","code":"showClass(\"fUGARCHSPEC\") #> Class \"fUGARCHSPEC\" [package \"fGarch\"] #>  #> Slots: #>                                                                #> Name:          model  distribution  optimization documentation #> Class:          list          list          list          list"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-absMoments.html","id":null,"dir":"Reference","previous_headings":"","what":"Absolute moments of GARCH distributions — absMoments","title":"Absolute moments of GARCH distributions — absMoments","text":"Computes absolute moments standard normal,      standardized GED, standardized skew Student-t      distributions.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-absMoments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Absolute moments of GARCH distributions — absMoments","text":"","code":"absMoments(n, density = c(\"dnorm\", \"dged\", \"dstd\"), ...)"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-absMoments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Absolute moments of GARCH distributions — absMoments","text":"n order absolute moment, can vector compute     several absolute moments . density character string naming symmetric density function. ... parameters passed density function.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-absMoments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Absolute moments of GARCH distributions — absMoments","text":"absMoments returns numeric vector length n   values absolute moments, specified n,   selected probability density function (pdf). density names one densities signature   absMoments, moments calculated known   formulas. Otherwise, numerical integration used attribute attached   results report estimate error. Note   density assumed symmetric wihtout check.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-absMoments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Absolute moments of GARCH distributions — absMoments","text":"numeric vector","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-absMoments.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Absolute moments of GARCH distributions — absMoments","text":"Fernandez C., Steel M.F.J. (2000);      Bayesian Modelling Fat Tails Skewness,     Preprint, 31 pages.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-absMoments.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Absolute moments of GARCH distributions — absMoments","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-absMoments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Absolute moments of GARCH distributions — absMoments","text":"","code":"## absMoment -  absMoments(1, \"dstd\", nu = 6) #> [1] 0.75 absMoments(1, \"dstd\", nu = 600) #> [1] 0.7975511 absMoments(1, \"dstd\", nu = 60000) #> [1] 0.7978812 absMoments(1, \"dstd\", nu = 600000) #> [1] 0.7978842  absMoments(1, \"dnorm\") #> [1] 0.7978846  ## excess kurtosis of t_nu is  6/(nu - 4) nu <- 6 absMoments(2*2, \"dstd\", nu = nu) / absMoments(2*1, \"dstd\", nu = nu)^2 - 3 #> [1] 3 6/(nu-4) #> [1] 3  ## 4th moment for t_4 is infinite absMoments(4, \"dstd\", nu = 4) #> [1] Inf  absMoments(1, \"dged\", nu = 4) #> [1] 0.8408964"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-ged.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized generalized error distribution — ged","title":"Standardized generalized error distribution — ged","text":"Functions compute density, distribution function, quantile function   generate random variates standardized generalized error   distribution.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-ged.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized generalized error distribution — ged","text":"","code":"dged(x, mean = 0, sd = 1, nu = 2, log = FALSE) pged(q, mean = 0, sd = 1, nu = 2) qged(p, mean = 0, sd = 1, nu = 2) rged(n, mean = 0, sd = 1, nu = 2)"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-ged.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized generalized error distribution — ged","text":"x, q numeric vector quantiles. p numeric vector probabilities. n number observations simulate. mean location parameter. sd scale parameter. nu shape parameter. log logical; TRUE, densities given log densities.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-ged.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardized generalized error distribution — ged","text":"standardized GED defined given sd   variance, sd^2, values shape parameter,   see reference Wuertz et al . dged computes density,   pged distribution function,   qged quantile function,     rged generates random deviates standardized-t   distribution specified parameters.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-ged.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized generalized error distribution — ged","text":"numeric vector","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-ged.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Standardized generalized error distribution — ged","text":"Nelson D.B. (1991);     Conditional Heteroscedasticity Asset Returns: New Approach,     Econometrica, 59, 347--370. Fernandez C., Steel M.F.J. (2000);      Bayesian Modelling Fat Tails Skewness,     Preprint, 31 pages. Wuertz D., Chalabi Y. Luksan L. (????);     Parameter estimation ARMA  models GARCH/APARCH errors: R       SPlus software implementation,     Preprint, 41 pages,     https://github.com/GeoBosh/fGarchDoc/blob/master/WurtzEtAlGarch.pdf","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-ged.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardized generalized error distribution — ged","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-ged.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized generalized error distribution — ged","text":"","code":"## sged -    par(mfrow = c(2, 2))    set.seed(1953)    r = rsged(n = 1000)    plot(r, type = \"l\", main = \"sged\", col = \"steelblue\")        # Plot empirical density and compare with true density:    hist(r, n = 25, probability = TRUE, border = \"white\", col = \"steelblue\")    box()    x = seq(min(r), max(r), length = 201)    lines(x, dsged(x), lwd = 2)        # Plot df and compare with true df:    plot(sort(r), (1:1000/1000), main = \"Probability\", col = \"steelblue\",      ylab = \"Probability\")    lines(x, psged(x), lwd = 2)        # Compute quantiles:    round(qsged(psged(q = seq(-1, 5, by = 1))), digits = 6) #> [1] -1  0  1  2  3  4  5"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-gedFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized error distribution parameter estimation — gedFit","title":"Generalized error distribution parameter estimation — gedFit","text":"Function fit parameters generalized error distribution.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-gedFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized error distribution parameter estimation — gedFit","text":"","code":"gedFit(x, ...)"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-gedFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized error distribution parameter estimation — gedFit","text":"x numeric vector quantiles. ... parameters parsed optimization function nlm.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-gedFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized error distribution parameter estimation — gedFit","text":"gedFit returns list following components: par best set parameters found. objective value objective corresponding par. convergence integer code, 0 indicates successful convergence. message character string giving additional information returned     optimizer, NULL. details, see PORT documentation. iterations Number iterations performed. evaluations Number objective function gradient function evaluations.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-gedFit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalized error distribution parameter estimation — gedFit","text":"Nelson D.B. (1991);     Conditional Heteroscedasticity Asset Returns: New Approach,     Econometrica, 59, 347--370. Fernandez C., Steel M.F.J. (2000);      Bayesian Modelling Fat Tails Skewness,     Preprint, 31 pages.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-gedFit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalized error distribution parameter estimation — gedFit","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-gedFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized error distribution parameter estimation — gedFit","text":"","code":"## rged -    set.seed(1953)    r = rged(n = 1000)         ## gedFit -    gedFit(r) #> $par #>        mean          sd          nu  #> -0.01416477  1.00755265  1.85747923  #>  #> $objective #> [1] 1425.889 #>  #> $convergence #> [1] 0 #>  #> $iterations #> [1] 19 #>  #> $evaluations #> function gradient  #>       27       91  #>  #> $message #> [1] \"relative convergence (4)\" #>"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-gedSlider.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized error distribution slider — gedSlider","title":"Generalized error distribution slider — gedSlider","text":"Displays interactively dependence GED distribution   parameters.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-gedSlider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized error distribution slider — gedSlider","text":"","code":"gedSlider(type = c(\"dist\", \"rand\"))"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-gedSlider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized error distribution slider — gedSlider","text":"type character string denoting interactive plot     displayed. Either distribution plot type = \"dist\",     default value, random variates plot, type = \"rand\".","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-gedSlider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized error distribution slider — gedSlider","text":"Tcl object","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-gedSlider.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalized error distribution slider — gedSlider","text":"Nelson D.B. (1991);     Conditional Heteroscedasticity Asset Returns: New Approach,     Econometrica, 59, 347--370. Fernandez C., Steel M.F.J. (2000);      Bayesian Modelling Fat Tails Skewness,     Preprint, 31 pages.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-gedSlider.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalized error distribution slider — gedSlider","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-gedSlider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized error distribution slider — gedSlider","text":"","code":"if (FALSE) {   ## gedSlider -    require(tcltk)    gedSlider(\"dist\")    gedSlider(\"rand\") }"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sged.html","id":null,"dir":"Reference","previous_headings":"","what":"Skew generalized error distribution — sged","title":"Skew generalized error distribution — sged","text":"Functions compute density, distribution function, quantile function   generate random variates skew generalized error   distribution.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sged.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skew generalized error distribution — sged","text":"","code":"dsged(x, mean = 0, sd = 1, nu = 2, xi = 1.5, log = FALSE) psged(q, mean = 0, sd = 1, nu = 2, xi = 1.5) qsged(p, mean = 0, sd = 1, nu = 2, xi = 1.5) rsged(n, mean = 0, sd = 1, nu = 2, xi = 1.5)"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sged.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skew generalized error distribution — sged","text":"mean, sd, nu, xi location parameter mean,     scale parameter sd,     shape parameter nu,      skewness parameter xi. n number observations. p numeric vector probabilities. x, q numeric vector quantiles. log logical; TRUE, densities given log densities.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sged.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Skew generalized error distribution — sged","text":"distribution standardized discussed reference   Wuertz et al .","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sged.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skew generalized error distribution — sged","text":"d* returns density,  p* returns distribution function,  q* returns quantile function,  r* generates random deviates, values numeric vectors.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sged.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Skew generalized error distribution — sged","text":"Nelson D.B. (1991);     Conditional Heteroscedasticity Asset Returns: New Approach,     Econometrica, 59, 347--370. Fernandez C., Steel M.F.J. (2000);      Bayesian Modelling Fat Tails Skewness,     Preprint, 31 pages. Wuertz D., Chalabi Y. Luksan L. (????);     Parameter estimation ARMA  models GARCH/APARCH errors: R       SPlus software implementation,     Preprint, 41 pages,     https://github.com/GeoBosh/fGarchDoc/blob/master/WurtzEtAlGarch.pdf","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sged.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Skew generalized error distribution — sged","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sged.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Skew generalized error distribution — sged","text":"","code":"## sged -    par(mfrow = c(2, 2))    set.seed(1953)    r = rsged(n = 1000)    plot(r, type = \"l\", main = \"sged\", col = \"steelblue\")        # Plot empirical density and compare with true density:    hist(r, n = 25, probability = TRUE, border = \"white\", col = \"steelblue\")    box()    x = seq(min(r), max(r), length = 201)    lines(x, dsged(x), lwd = 2)        # Plot df and compare with true df:    plot(sort(r), (1:1000/1000), main = \"Probability\", col = \"steelblue\",      ylab = \"Probability\")    lines(x, psged(x), lwd = 2)        # Compute quantiles:    round(qsged(psged(q = seq(-1, 5, by = 1))), digits = 6) #> [1] -1  0  1  2  3  4  5"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sgedFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Skew generalized error distribution parameter estimation — sgedFit","title":"Skew generalized error distribution parameter estimation — sgedFit","text":"Function fit parameters skew generalized error   distribution.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sgedFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skew generalized error distribution parameter estimation — sgedFit","text":"","code":"sgedFit(x, ...)"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sgedFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skew generalized error distribution parameter estimation — sgedFit","text":"x numeric vector quantiles. ... parameters parsed optimization function nlm.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sgedFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skew generalized error distribution parameter estimation — sgedFit","text":"sgedFit returns list following components: par best set parameters found. objective value objective corresponding par. convergence integer code. 0 indicates successful convergence. message character string giving additional information returned     optimizer, NULL. details, see PORT documentation. iterations Number iterations performed. evaluations Number objective function gradient function evaluations.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sgedFit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Skew generalized error distribution parameter estimation — sgedFit","text":"Nelson D.B. (1991);     Conditional Heteroscedasticity Asset Returns: New Approach,     Econometrica, 59, 347--370. Fernandez C., Steel M.F.J. (2000);      Bayesian Modelling Fat Tails Skewness,     Preprint, 31 pages.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sgedFit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Skew generalized error distribution parameter estimation — sgedFit","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sgedFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Skew generalized error distribution parameter estimation — sgedFit","text":"","code":"## rsged -    set.seed(1953)    r = rsged(n = 1000)         ## sgedFit -    sgedFit(r) #> $par #>       mean         sd         nu         xi  #> 0.01115429 1.00416120 1.92236744 1.48742248  #>  #> $objective #> [1] 1390.069 #>  #> $convergence #> [1] 0 #>  #> $iterations #> [1] 24 #>  #> $evaluations #> function gradient  #>       33      147  #>  #> $message #> [1] \"relative convergence (4)\" #>"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sgedSlider.html","id":null,"dir":"Reference","previous_headings":"","what":"Skew GED distribution slider — sgedSlider","title":"Skew GED distribution slider — sgedSlider","text":"Displays interactively dependence skew GED distribution     parameters.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sgedSlider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skew GED distribution slider — sgedSlider","text":"","code":"sgedSlider(type = c(\"dist\", \"rand\"))"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sgedSlider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skew GED distribution slider — sgedSlider","text":"type character string denoting interactive plot     displayed. Either distribution plot type=\"dist\",     default value, random variates plot, type=\"rand\".","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sgedSlider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skew GED distribution slider — sgedSlider","text":"Tcl object","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sgedSlider.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Skew GED distribution slider — sgedSlider","text":"Nelson D.B. (1991);     Conditional Heteroscedasticity Asset Returns: New Approach,     Econometrica, 59, 347--370. Fernandez C., Steel M.F.J. (2000);      Bayesian Modelling Fat Tails Skewness,     Preprint, 31 pages.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sgedSlider.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Skew GED distribution slider — sgedSlider","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sgedSlider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Skew GED distribution slider — sgedSlider","text":"","code":"if (FALSE) {   ## sgedSlider -    require(tcltk)    sgedSlider(\"dist\")    sgedSlider(\"rand\") }"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-snorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Skew normal distribution — snorm","title":"Skew normal distribution — snorm","text":"Functions compute density, distribution function, quantile function   generate random variates skew normal distribution. distribution standardized discussed reference   Wuertz et al .","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-snorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skew normal distribution — snorm","text":"","code":"dsnorm(x, mean = 0, sd = 1, xi = 1.5, log = FALSE) psnorm(q, mean = 0, sd = 1, xi = 1.5) qsnorm(p, mean = 0, sd = 1, xi = 1.5) rsnorm(n, mean = 0, sd = 1, xi = 1.5)"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-snorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skew normal distribution — snorm","text":"x, q numeric vector quantiles. p numeric vector probabilities. n number observations. mean location parameter. sd scale parameter. xi skewness parameter. log logical; TRUE, densities given log densities.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-snorm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Skew normal distribution — snorm","text":"dsnorm computed density,   psnorm distribution function,   qsnorm quantile function,     rsnorm generates random deviates.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-snorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skew normal distribution — snorm","text":"numeric vector","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-snorm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Skew normal distribution — snorm","text":"Fernandez C., Steel M.F.J. (2000);      Bayesian Modelling Fat Tails Skewness,     Preprint, 31 pages. Wuertz D., Chalabi Y. Luksan L. (????);     Parameter estimation ARMA  models GARCH/APARCH errors: R       SPlus software implementation,     Preprint, 41 pages,     https://github.com/GeoBosh/fGarchDoc/blob/master/WurtzEtAlGarch.pdf","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-snorm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Skew normal distribution — snorm","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-snorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Skew normal distribution — snorm","text":"","code":"## snorm -    # Ranbdom Numbers:    par(mfrow = c(2, 2))    set.seed(1953)    r = rsnorm(n = 1000)    plot(r, type = \"l\", main = \"snorm\", col = \"steelblue\")        # Plot empirical density and compare with true density:    hist(r, n = 25, probability = TRUE, border = \"white\", col = \"steelblue\")    box()    x = seq(min(r), max(r), length = 201)    lines(x, dsnorm(x), lwd = 2)        # Plot df and compare with true df:    plot(sort(r), (1:1000/1000), main = \"Probability\", col = \"steelblue\",      ylab = \"Probability\")    lines(x, psnorm(x), lwd = 2)        # Compute quantiles:    round(qsnorm(psnorm(q = seq(-1, 5, by = 1))), digits = 6) #> [1] -1  0  1  2  3  4  5"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-snormFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Skew normal distribution parameter estimation — snormFit","title":"Skew normal distribution parameter estimation — snormFit","text":"Fits parameters skew normal distribution.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-snormFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skew normal distribution parameter estimation — snormFit","text":"","code":"snormFit(x, ...)"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-snormFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skew normal distribution parameter estimation — snormFit","text":"x numeric vector quantiles. ... parameters passed optimization function nlm.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-snormFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skew normal distribution parameter estimation — snormFit","text":"snormFit returns list following components: par best set parameters found. objective value objective corresponding par. convergence integer code. 0 indicates successful convergence. message character string giving additional information returned     optimizer, NULL. details, see PORT documentation. iterations Number iterations performed. evaluations Number objective function gradient function      evaluations.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-snormFit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Skew normal distribution parameter estimation — snormFit","text":"Fernandez C., Steel M.F.J. (2000);      Bayesian Modelling Fat Tails Skewness,     Preprint, 31 pages.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-snormFit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Skew normal distribution parameter estimation — snormFit","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-snormFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Skew normal distribution parameter estimation — snormFit","text":"","code":"## rsnorm -    set.seed(1953)    r = rsnorm(n = 1000)         ## snormFit -    snormFit(r) #> $par #>       mean         sd         xi  #> 0.06694004 1.03494430 1.57611278  #>  #> $objective #> [1] 1413.746 #>  #> $convergence #> [1] 0 #>  #> $iterations #> [1] 24 #>  #> $evaluations #> function gradient  #>       31       90  #>  #> $message #> [1] \"relative convergence (4)\" #>"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-snormSlider.html","id":null,"dir":"Reference","previous_headings":"","what":"Skew normal distribution slider — snormSlider","title":"Skew normal distribution slider — snormSlider","text":"Displays interactively dependence skew Normal distribution   parameters.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-snormSlider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skew normal distribution slider — snormSlider","text":"","code":"snormSlider(type = c(\"dist\", \"rand\"))"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-snormSlider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skew normal distribution slider — snormSlider","text":"type character string denoting interactive plot     displayed. Either distribution plot type=\"dist\",     default value, random variates plot, type=\"rand\".","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-snormSlider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skew normal distribution slider — snormSlider","text":"Tcl object","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-snormSlider.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Skew normal distribution slider — snormSlider","text":"Fernandez C., Steel M.F.J. (2000);      Bayesian Modelling Fat Tails Skewness,     Preprint, 31 pages.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-snormSlider.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Skew normal distribution slider — snormSlider","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-snormSlider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Skew normal distribution slider — snormSlider","text":"","code":"if (FALSE) {   ## snormSlider -    require(tcltk)    snormSlider(\"dist\")    snormSlider(\"rand\") }"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sstd.html","id":null,"dir":"Reference","previous_headings":"","what":"Skew Student-t distribution — sstd","title":"Skew Student-t distribution — sstd","text":"Functions compute density, distribution function, quantile function   generate random variates skew Student-t distribution.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sstd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skew Student-t distribution — sstd","text":"","code":"dsstd(x, mean = 0, sd = 1, nu = 5, xi = 1.5, log = FALSE) psstd(q, mean = 0, sd = 1, nu = 5, xi = 1.5) qsstd(p, mean = 0, sd = 1, nu = 5, xi = 1.5) rsstd(n, mean = 0, sd = 1, nu = 5, xi = 1.5)"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sstd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skew Student-t distribution — sstd","text":"x, q numeric vector quantiles. p numeric vector probabilities. n number observations simulate. mean location parameter. sd scale parameter. nu shape parameter (degrees freedom). xi skewness parameter. log logical; TRUE, densities given log densities.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sstd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Skew Student-t distribution — sstd","text":"distribution standardized discussed reference   Wuertz et al . dsstd computes density,   psstd distribution function,   qsstd quantile function,   rsstd generates random deviates.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sstd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skew Student-t distribution — sstd","text":"numeric vector","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sstd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Skew Student-t distribution — sstd","text":"Fernandez C., Steel M.F.J. (2000);      Bayesian Modelling Fat Tails Skewness,     Preprint, 31 pages. Wuertz D., Chalabi Y. Luksan L. (????);     Parameter estimation ARMA  models GARCH/APARCH errors: R       SPlus software implementation,     Preprint, 41 pages,     https://github.com/GeoBosh/fGarchDoc/blob/master/WurtzEtAlGarch.pdf","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sstd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Skew Student-t distribution — sstd","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sstd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Skew Student-t distribution — sstd","text":"","code":"## sstd -    par(mfrow = c(2, 2))    set.seed(1953)    r = rsstd(n = 1000)    plot(r, type = \"l\", main = \"sstd\", col = \"steelblue\")        # Plot empirical density and compare with true density:    hist(r, n = 25, probability = TRUE, border = \"white\", col = \"steelblue\")    box()    x = seq(min(r), max(r), length = 201)    lines(x, dsstd(x), lwd = 2)        # Plot df and compare with true df:    plot(sort(r), (1:1000/1000), main = \"Probability\", col = \"steelblue\",      ylab = \"Probability\")    lines(x, psstd(x), lwd = 2)        # Compute quantiles:    round(qsstd(psstd(q = seq(-1, 5, by = 1))), digits = 6) #> [1] -1  0  1  2  3  4  5"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sstdFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Skew Student-t distribution parameter estimation — sstdFit","title":"Skew Student-t distribution parameter estimation — sstdFit","text":"Fits parameters skew Student-t distribution.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sstdFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skew Student-t distribution parameter estimation — sstdFit","text":"","code":"sstdFit(x, ...)"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sstdFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skew Student-t distribution parameter estimation — sstdFit","text":"x numeric vector quantiles. ... parameters passed optimization function nlm.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sstdFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skew Student-t distribution parameter estimation — sstdFit","text":"sstdFit returns list following components: par best set parameters found. objective value objective corresponding par. convergence integer code. 0 indicates successful convergence. message character string giving additional information returned     optimizer, NULL. details, see PORT documentation. iterations Number iterations performed. evaluations Number objective function gradient function evaluations.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sstdFit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Skew Student-t distribution parameter estimation — sstdFit","text":"Fernandez C., Steel M.F.J. (2000);      Bayesian Modelling Fat Tails Skewness,     Preprint, 31 pages.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sstdFit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Skew Student-t distribution parameter estimation — sstdFit","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sstdFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Skew Student-t distribution parameter estimation — sstdFit","text":"","code":"## sstd -    set.seed(1953)    r = rsstd(n = 1000)          ## sstdFit -    sstdFit(r) #> $minimum #> [1] 1306.033 #>  #> $estimate #>        mean          sd          nu          xi  #> -0.01376393  1.00314970  4.21091035  1.37308787  #>  #> $gradient #>          mean            sd            nu            xi  #>  5.691163e-04  3.685488e-04  2.985997e-05 -1.288313e-04  #>  #> $code #> [1] 1 #>  #> $iterations #> [1] 18 #>"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sstdSlider.html","id":null,"dir":"Reference","previous_headings":"","what":"Skew Student-t distribution slider — sstdSlider","title":"Skew Student-t distribution slider — sstdSlider","text":"Displays interactively dependence skew Student-t     distribution parameters.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sstdSlider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skew Student-t distribution slider — sstdSlider","text":"","code":"sstdSlider(type = c(\"dist\", \"rand\"))"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sstdSlider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skew Student-t distribution slider — sstdSlider","text":"type character string denoting interactive plot     displayed. Either distribution plot type=\"dist\",     default value, random variates plot, type=\"rand\".","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sstdSlider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skew Student-t distribution slider — sstdSlider","text":"Tcl object","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sstdSlider.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Skew Student-t distribution slider — sstdSlider","text":"Fernandez C., Steel M.F.J. (2000);      Bayesian Modelling Fat Tails Skewness,     Preprint, 31 pages.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sstdSlider.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Skew Student-t distribution slider — sstdSlider","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-sstdSlider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Skew Student-t distribution slider — sstdSlider","text":"","code":"if (FALSE) {   ## sstdSlider -    require(tcltk)    sstdSlider(\"dist\")    sstdSlider(\"rand\") }"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-std.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized Student-t distribution — std","title":"Standardized Student-t distribution — std","text":"Functions compute density, distribution function, quantile function   generate random variates standardized Student-t   distribution.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-std.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized Student-t distribution — std","text":"","code":"dstd(x, mean = 0, sd = 1, nu = 5, log = FALSE) pstd(q, mean = 0, sd = 1, nu = 5) qstd(p, mean = 0, sd = 1, nu = 5) rstd(n, mean = 0, sd = 1, nu = 5)"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-std.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized Student-t distribution — std","text":"x, q numeric vector quantiles. p numeric vector probabilities. n number observations simulate. mean location parameter. sd scale parameter. nu shape parameter (degrees freedom). log logical; TRUE, densities given log densities.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-std.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardized Student-t distribution — std","text":"standardized Student-t distribution defined given   sd variance, sd^2, degrees   freedom. comparison, variance usual Student-t   distribution nu/(nu-2), nu degrees   freedom.  usual Student-t distribution obtained setting   sd = sqrt(nu/(nu - 2)). Argument nu must greater 2. Although default   value nu, rather arbitrary relying   strongly discouraged. dstd computes density,   pstd distribution function,   qstd quantile function,     rstd generates random deviates standardized-t   distribution specified parameters.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-std.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized Student-t distribution — std","text":"numeric vector","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-std.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Standardized Student-t distribution — std","text":"Fernandez C., Steel M.F.J. (2000);      Bayesian Modelling Fat Tails Skewness,     Preprint, 31 pages. Wuertz D., Chalabi Y. Luksan L. (2006);     Parameter estimation ARMA  models GARCH/APARCH errors: R       SPlus software implementation,     Preprint, 41 pages,     https://github.com/GeoBosh/fGarchDoc/blob/master/WurtzEtAlGarch.pdf","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-std.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardized Student-t distribution — std","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-std.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized Student-t distribution — std","text":"","code":"## std -  pstd(1, sd = sqrt(5/(5-2)), nu = 5) == pt(1, df = 5) # TRUE #> [1] TRUE     par(mfrow = c(2, 2))    set.seed(1953)    r = rstd(n = 1000)    plot(r, type = \"l\", main = \"sstd\", col = \"steelblue\")        # Plot empirical density and compare with true density:    hist(r, n = 25, probability = TRUE, border = \"white\", col = \"steelblue\")    box()    x = seq(min(r), max(r), length = 201)    lines(x, dstd(x), lwd = 2)        # Plot df and compare with true df:    plot(sort(r), (1:1000/1000), main = \"Probability\", col = \"steelblue\",      ylab = \"Probability\")    lines(x, pstd(x), lwd = 2)        # Compute quantiles:    round(qstd(pstd(q = seq(-1, 5, by = 1))), digits = 6) #> [1] -1  0  1  2  3  4  5"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-stdFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Student-t distribution parameter estimation — stdFit","title":"Student-t distribution parameter estimation — stdFit","text":"Fits parameters standardized Student-t distribution.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-stdFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Student-t distribution parameter estimation — stdFit","text":"","code":"stdFit(x, ...)"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-stdFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Student-t distribution parameter estimation — stdFit","text":"x numeric vector quantiles. ... parameters parsed optimization function nlm.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-stdFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Student-t distribution parameter estimation — stdFit","text":"stdFit returns list following components: par best set parameters found. objective value objective corresponding par. convergence integer code. 0 indicates successful convergence. message character string giving additional information returned     optimizer, NULL. details, see PORT documentation.  iterations Number iterations performed. evaluations Number objective function gradient function evaluations.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-stdFit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Student-t distribution parameter estimation — stdFit","text":"Fernandez C., Steel M.F.J. (2000);      Bayesian Modelling Fat Tails Skewness,     Preprint, 31 pages.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-stdFit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Student-t distribution parameter estimation — stdFit","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-stdFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Student-t distribution parameter estimation — stdFit","text":"","code":"## std -    set.seed(1953)    r = rstd(n = 1000)          ## stdFit -    stdFit(r) #> $par #>        mean          sd          nu  #> -0.04913403  1.02055890  3.96747983  #>  #> $objective #> [1] 1353.659 #>  #> $convergence #> [1] 0 #>  #> $iterations #> [1] 15 #>  #> $evaluations #> function gradient  #>       28       75  #>  #> $message #> [1] \"relative convergence (4)\" #>"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-stdSlider.html","id":null,"dir":"Reference","previous_headings":"","what":"Student-t distribution slider — stdSlider","title":"Student-t distribution slider — stdSlider","text":"Displays interactively dependence Student-t distribution   parameters.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-stdSlider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Student-t distribution slider — stdSlider","text":"","code":"stdSlider(type = c(\"dist\", \"rand\"))"},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-stdSlider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Student-t distribution slider — stdSlider","text":"type character string denoting interactive plot     displayed. Either distribution plot type=\"dist\",     default value, random variates plot, type=\"rand\".","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-stdSlider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Student-t distribution slider — stdSlider","text":"Tcl object","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-stdSlider.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Student-t distribution slider — stdSlider","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/dist-stdSlider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Student-t distribution slider — stdSlider","text":"","code":"if (FALSE) {   ## stdSlider -    require(tcltk)    stdSlider(\"dist\")    stdSlider(\"rand\") }"},{"path":"https://geobosh.github.io/fGarchDoc/reference/fGarchData.html","id":null,"dir":"Reference","previous_headings":"","what":"Time series datasets — fGarchData","title":"Time series datasets — fGarchData","text":"Datasets used examples, including DEM/GBP foreign exchange   rates data SP500 index.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/fGarchData.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Time series datasets — fGarchData","text":"dem2gbp data frame one column \"DEM2GBP\"   1974 rows (observations). sp500dge data frame one column \"SP500DGE\"   17055 rows (observations).","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/fGarchData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time series datasets — fGarchData","text":"data represent retuns. details recorded. datasets available packages fGarch   imports, see fBasicsData   TimeSeriesData.","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/fGarchData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time series datasets — fGarchData","text":"","code":"data(dem2gbp) head(dem2gbp) #>       DEM2GBP #> 1  0.12533286 #> 2  0.02887427 #> 3  0.06346177 #> 4  0.22671922 #> 5 -0.21426695 #> 6  0.20285367 tail(dem2gbp) #>          DEM2GBP #> 1969 -0.47823610 #> 1970 -0.40853965 #> 1971 -0.03046769 #> 1972 -0.11754582 #> 1973 -0.23127105 #> 1974  0.52804687 str(dem2gbp) #> 'data.frame':\t1974 obs. of  1 variable: #>  $ DEM2GBP: num  0.1253 0.0289 0.0635 0.2267 -0.2143 ... plot(dem2gbp[[1]])   data(sp500dge) head(sp500dge) #>        SP500 #> 1  0.0000000 #> 2 -0.0022548 #> 3 -0.0096400 #> 4  0.0062482 #> 5  0.0011319 #> 6 -0.0102332 tail(sp500dge) #>            SP500 #> 17050  0.0072311 #> 17051 -0.0008122 #> 17052 -0.0020079 #> 17053  0.0090668 #> 17054 -0.0004287 #> 17055 -0.0026266 str(sp500dge) #> 'data.frame':\t17055 obs. of  1 variable: #>  $ SP500: num  0 -0.00225 -0.00964 0.00625 0.00113 ... plot(sp500dge[[1]])"},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit univariate and multivariate GARCH-type models — garchFit","title":"Fit univariate and multivariate GARCH-type models — garchFit","text":"Estimates parameters univariate ARMA-GARCH/APARCH process,   --- experimentally --- multivariate GO-GARCH process model.    latter uses algorithm based fastICA(), inspired   Bernhard Pfaff's package gogarch.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit univariate and multivariate GARCH-type models — garchFit","text":"","code":"garchFit(formula = ~ garch(1, 1), data, \tinit.rec = c(\"mci\", \"uev\"), \tdelta = 2, skew = 1, shape = 4, \tcond.dist = c(\"norm\", \"snorm\", \"ged\", \"sged\",                       \"std\", \"sstd\", \"snig\", \"QMLE\"), \tinclude.mean = TRUE, include.delta = NULL, include.skew = NULL,         include.shape = NULL,         leverage = NULL, trace = TRUE, \t<!-- %recursion = c(\"internal\", \"filter\", \"testing\"), --> \talgorithm = c(\"nlminb\", \"lbfgsb\", \"nlminb+nm\", \"lbfgsb+nm\"), \thessian = c(\"ropt\", \"rcd\"),         control = list(),         title = NULL, description = NULL, ...)  garchKappa(cond.dist = c(\"norm\", \"ged\", \"std\", \"snorm\", \"sged\", \"sstd\", \"snig\"),            gamma = 0, delta = 2, skew = NA, shape = NA)  .gogarchFit(formula = ~garch(1, 1), data, init.rec = c(\"mci\", \"uev\"),             delta = 2, skew = 1, shape = 4,             cond.dist = c(\"norm\", \"snorm\", \"ged\", \"sged\",                           \"std\", \"sstd\", \"snig\", \"QMLE\"),             include.mean = TRUE, include.delta = NULL, include.skew = NULL,             include.shape = NULL,             leverage = NULL, trace = TRUE,             algorithm = c(\"nlminb\", \"lbfgsb\", \"nlminb+nm\", \"lbfgsb+nm\"),             hessian = c(\"ropt\", \"rcd\"),             control = list(),             title = NULL, description = NULL, ...)"},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit univariate and multivariate GARCH-type models — garchFit","text":"formula formula object describing mean variance equation     ARMA-GARCH/APARCH model.  pure GARCH(1,1) model selected     e.g., formula = ~garch(1,1).  specify     ARMA(2,1)-APARCH(1,1) process, use  ~ arma(2,1) + aparch(1,1). data optional \"timeSeries\" \"data.frame\" object     containing variables model.  found     data, variables taken     environment(formula), typically environment     armaFit called.  data univariate series,     series converted numeric vector name     response formula neglected.  init.rec character string indicating method initialize     mean varaince recursion relation. delta numeric value, exponent delta variance recursion.       default, value fixed, otherwise exponent       estimated together model parameters       include.delta=FALSE. skew numeric value, skewness parameter conditional       distribution. shape numeric value, shape parameter conditional distribution. cond.dist character string naming desired conditional distribution.     Valid values \"dnorm\", \"dged\", \"dstd\",     \"dsnorm\", \"dsged\", \"dsstd\"     \"QMLE\". default value normal distribution.  See     Details information. include.mean flag determines parameter mean estimated       . include.mean=TRUE case, otherwise       parameter kept fixed durcing process       parameter optimization. include.delta logical determining     parameter recursion equation delta estimated     .  false, shape parameter kept fixed     process parameter optimization. include.skew logical flag determines parameter skewness       conditional distribution estimated .       include.skew=FALSE skewness parameter kept       fixed process parameter optimization. include.shape logical flag determines parameter shape       conditional distribution estimated .       include.shape=FALSE shape parameter kept       fixed process parameter optimization. leverage logical flag APARCH models. model leveraged?       default leverage=TRUE. trace logical flag. optimization process fitting       model parameters printed? default trace=TRUE. algorithm string parameter determines algorithm used maximum     likelihood estimation. hessian string denoting Hessian matrix evaluated,     either hessian =\"rcd\", \"ropt\".  default,     \"rcd\"  central difference approximation implemented     R \"ropt\" uses internal R function optimhess. control control parameters, used functions     nlminb, 'bfgs' 'Nelder-Mead' optim. gamma APARCH leverage parameter entering formula calculating     expectation value. title character string allows project title. description optional character string brief description. ... additional arguments passed.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchFit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit univariate and multivariate GARCH-type models — garchFit","text":"\"QMLE\" stands Quasi-Maximum Likelihood Estimation,     assumes normal distribution uses robust standard errors     inference. Bollerslev Wooldridge (1992) proved mean     volatility equations correctly specified, QML     estimates consistent asymptotically normally     distributed. However, estimates efficient “    efficiency loss can marked asymmetric ... distributions”     (Bollerslev Wooldridge (1992), p. 166). robust     variance-covariance matrix estimates equals (Eicker-White)     sandwich estimator, .e. $$V = H^{-1} G^{\\prime} G H^{-1},$$ \\(V\\) denotes variance-covariance matrix, \\(H\\)     stands Hessian \\(G\\) represents matrix     contributions gradient, elements defined $$G_{t,} = \\frac{\\partial l_{t}}{\\partial \\zeta_{}},$$ \\(t_{t}\\) log likelihood t-th observation     \\(\\zeta_{}\\) -th estimated parameter. See     sections 10.3 10.4 Davidson MacKinnon (2004)     detailed description robust variance-covariance matrix.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit univariate and multivariate GARCH-type models — garchFit","text":"garchFit, S4 object class \"fGARCH\".   Slot @fit contains results optimization. .gogarchFit(): Similar definition GO-GARCH modeling.   , data must multivariate.   Still “preliminary”, mostly undocumented, untested(!).    least mentioned ...","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchFit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit univariate and multivariate GARCH-type models — garchFit","text":"ATT (1984);     PORT Library Documentation,     http://netlib.bell-labs.com/netlib/port/. Bera .K., Higgins M.L. (1993);     ARCH Models: Properties, Estimation Testing,     J. Economic Surveys 7, 305--362. Bollerslev T. (1986);     Generalized Autoregressive Conditional Heteroscedasticity,     Journal Econometrics 31, 307--327. Bollerslev T., Wooldridge J.M. (1992);     Quasi-Maximum Likelihood Estimation Inference Dynamic     Models Time-Varying Covariance,     Econometric Reviews 11, 143--172. Byrd R.H., Lu P., Nocedal J., Zhu C. (1995);     Limited Memory Algorithm Bound Constrained Optimization,     SIAM Journal Scientific Computing 16, 1190--1208. Davidson R., MacKinnon J.G. (2004);     Econometric Theory Methods,     Oxford University Press, New York. Engle R.F. (1982);     Autoregressive Conditional Heteroscedasticity Estimates     Variance United Kingdom Inflation,     Econometrica 50, 987--1008. Nash J.C. (1990);     Compact Numerical Methods Computers,     Linear Algebra Function Minimisation,     Adam Hilger. Nelder J.., Mead R. (1965);     Simplex Algorithm Function Minimization,     Computer Journal 7, 308--313. Nocedal J., Wright S.J. (1999);     Numerical Optimization,     Springer, New York.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchFit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fit univariate and multivariate GARCH-type models — garchFit","text":"Diethelm Wuertz Rmetrics R-port,     R Core Team 'optim' R-port,     Douglas Bates Deepayan Sarkar 'nlminb' R-port,     Bell-Labs underlying PORT Library,     Ladislav Luksan underlying Fortran SQP Routine,      Zhu, Byrd, Lu-Chen Nocedal underlying L-BFGS-B Routine. Martin Maechler cleaning ; mentioning     .gogarchFit().","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit univariate and multivariate GARCH-type models — garchFit","text":"","code":"## UNIVARIATE TIME SERIES INPUT:    # In the univariate case the lhs formula has not to be specified ...     # A numeric Vector from default GARCH(1,1) - fix the seed:    N = 200    x.vec = as.vector(garchSim(garchSpec(rseed = 1985), n = N)[,1])    garchFit(~ garch(1,1), data = x.vec, trace = FALSE) #>  #> Title: #>  GARCH Modelling  #>  #> Call: #>  garchFit(formula = ~garch(1, 1), data = x.vec, trace = FALSE)  #>  #> Mean and Variance Equation: #>  data ~ garch(1, 1) #> <environment: 0x569a0c24a8c0> #>  [data = x.vec] #>  #> Conditional Distribution: #>  norm  #>  #> Coefficient(s): #>         mu       omega      alpha1       beta1   #> 3.5418e-05  1.0819e-06  8.8855e-02  8.1200e-01   #>  #> Std. Errors: #>  based on Hessian  #>  #> Error Analysis: #>         Estimate  Std. Error  t value Pr(>|t|)     #> mu     3.542e-05   2.183e-04    0.162    0.871     #> omega  1.082e-06   1.051e-06    1.030    0.303     #> alpha1 8.885e-02   5.450e-02    1.630    0.103     #> beta1  8.120e-01   1.242e-01    6.538 6.25e-11 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Log Likelihood: #>  861.9494    normalized:  4.309747  #>  #> Description: #>  Tue Apr 30 14:51:49 2024 by user: georgi  #>      # An univariate timeSeries object with dummy dates:    stopifnot(require(\"timeSeries\")) #> Loading required package: timeSeries #> Loading required package: timeDate #>  #> Attaching package: ‘timeSeries’ #> The following objects are masked from ‘package:graphics’: #>  #>     lines, points    x.timeSeries = dummyDailySeries(matrix(x.vec), units = \"GARCH11\")    garchFit(~ garch(1,1), data = x.timeSeries, trace = FALSE) #>  #> Title: #>  GARCH Modelling  #>  #> Call: #>  garchFit(formula = ~garch(1, 1), data = x.timeSeries, trace = FALSE)  #>  #> Mean and Variance Equation: #>  data ~ garch(1, 1) #> <environment: 0x569a0cfabfb8> #>  [data = x.timeSeries] #>  #> Conditional Distribution: #>  norm  #>  #> Coefficient(s): #>         mu       omega      alpha1       beta1   #> 3.5418e-05  1.0819e-06  8.8855e-02  8.1200e-01   #>  #> Std. Errors: #>  based on Hessian  #>  #> Error Analysis: #>         Estimate  Std. Error  t value Pr(>|t|)     #> mu     3.542e-05   2.183e-04    0.162    0.871     #> omega  1.082e-06   1.051e-06    1.030    0.303     #> alpha1 8.885e-02   5.450e-02    1.630    0.103     #> beta1  8.120e-01   1.242e-01    6.538 6.25e-11 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Log Likelihood: #>  861.9494    normalized:  4.309747  #>  #> Description: #>  Tue Apr 30 14:51:49 2024 by user: georgi  #>   if (FALSE) {    # An univariate zoo object:    require(\"zoo\")    x.zoo = zoo(as.vector(x.vec), order.by = as.Date(rownames(x.timeSeries)))    garchFit(~ garch(1,1), data = x.zoo, trace = FALSE) }     # An univariate \"ts\" object:    x.ts = as.ts(x.vec)    garchFit(~ garch(1,1), data = x.ts, trace = FALSE) #>  #> Title: #>  GARCH Modelling  #>  #> Call: #>  garchFit(formula = ~garch(1, 1), data = x.ts, trace = FALSE)  #>  #> Mean and Variance Equation: #>  data ~ garch(1, 1) #> <environment: 0x569a0e5f7118> #>  [data = x.ts] #>  #> Conditional Distribution: #>  norm  #>  #> Coefficient(s): #>         mu       omega      alpha1       beta1   #> 3.5418e-05  1.0819e-06  8.8855e-02  8.1200e-01   #>  #> Std. Errors: #>  based on Hessian  #>  #> Error Analysis: #>         Estimate  Std. Error  t value Pr(>|t|)     #> mu     3.542e-05   2.183e-04    0.162    0.871     #> omega  1.082e-06   1.051e-06    1.030    0.303     #> alpha1 8.885e-02   5.450e-02    1.630    0.103     #> beta1  8.120e-01   1.242e-01    6.538 6.25e-11 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Log Likelihood: #>  861.9494    normalized:  4.309747  #>  #> Description: #>  Tue Apr 30 14:51:49 2024 by user: georgi  #>   ## MULTIVARIATE TIME SERIES INPUT:    # For multivariate data inputs the lhs formula must be specified ...     # A numeric matrix binded with dummy random normal variates:    X.mat = cbind(GARCH11 = x.vec, R = rnorm(N))    garchFit(GARCH11 ~ garch(1,1), data = X.mat) #>  #> Series Initialization: #>  ARMA Model:                arma #>  Formula Mean:              ~ arma(0, 0) #>  GARCH Model:               garch #>  Formula Variance:          ~ garch(1, 1) #>  ARMA Order:                0 0 #>  Max ARMA Order:            0 #>  GARCH Order:               1 1 #>  Max GARCH Order:           1 #>  Maximum Order:             1 #>  Conditional Dist:          norm #>  h.start:                   2 #>  llh.start:                 1 #>  Length of Series:          200 #>  Recursion Init:            mci #>  Series Scale:              0.003308171 #>  #> Parameter Initialization: #>  Initial Parameters:          $params #>  Limits of Transformations:   $U, $V #>  Which Parameters are Fixed?  $includes #>  Parameter Matrix: #>                      U            V       params includes #>     mu     -0.05516776   0.05516776 -0.005516776     TRUE #>     omega   0.00000100 100.00000000  0.100000000     TRUE #>     alpha1  0.00000001   0.99999999  0.100000000     TRUE #>     gamma1 -0.99999999   0.99999999  0.100000000    FALSE #>     beta1   0.00000001   0.99999999  0.800000000     TRUE #>     delta   0.00000000   2.00000000  2.000000000    FALSE #>     skew    0.10000000  10.00000000  1.000000000    FALSE #>     shape   1.00000000  10.00000000  4.000000000    FALSE #>  Index List of Parameters to be Optimized: #>     mu  omega alpha1  beta1  #>      1      2      3      5  #>  Persistence:                  0.9  #>  #>  #> --- START OF TRACE --- #> Selected Algorithm: nlminb  #>  #> R coded nlminb Solver:  #>  #>   0:     280.37902: -0.00551678 0.100000 0.100000 0.800000 #>   1:     280.37507: -0.00551675 0.101085 0.0997614 0.800840 #>   2:     280.37172: -0.00551671 0.100985 0.0984074 0.800529 #>   3:     280.36889: -0.00551668 0.102056 0.0981374 0.801378 #>   4:     280.36553: -0.00551664 0.101972 0.0967732 0.801110 #>   5:     280.36291: -0.00551659 0.102982 0.0962621 0.801921 #>   6:     280.36028: -0.00551652 0.102987 0.0948733 0.801815 #>   7:     280.35812: -0.00551642 0.103857 0.0941985 0.802668 #>   8:     280.35640: -0.00551626 0.103796 0.0928284 0.802909 #>   9:     280.35510: -0.00551594 0.104079 0.0921544 0.804093 #>  10:     280.35429: -0.00551543 0.103412 0.0912751 0.804938 #>  11:     280.35380: -0.00551470 0.102925 0.0909305 0.806189 #>  12:     280.35345: -0.00551337 0.102118 0.0903861 0.807156 #>  13:     280.35308: -0.00550880 0.101958 0.0898304 0.808116 #>  14:     280.35296: -0.00550326 0.101305 0.0896346 0.808798 #>  15:     280.35287: -0.00549602 0.101693 0.0894169 0.808659 #>  16:     280.35280: -0.00548956 0.101338 0.0890255 0.809195 #>  17:     280.35270: -0.00548306 0.100990 0.0889425 0.809846 #>  18:     280.35261: -0.00546712 0.100295 0.0886753 0.810712 #>  19:     280.35191: -0.00526092 0.100384 0.0880880 0.811016 #>  20:     280.34947: -0.00443606 0.0998012 0.0868493 0.812628 #>  21:     280.34213: -0.00121747 0.0993041 0.0846804 0.814752 #>  22:     280.33288: 0.00415509 0.0983925 0.0835405 0.816652 #>  23:     280.32556: 0.00933509 0.0984673 0.0851411 0.815292 #>  24:     280.32295: 0.0112564 0.0984683 0.0875808 0.813418 #>  25:     280.32262: 0.0109708 0.0988384 0.0887005 0.812137 #>  26:     280.32261: 0.0107322 0.0988356 0.0888526 0.812038 #>  27:     280.32261: 0.0107066 0.0988719 0.0888596 0.811988 #>  28:     280.32261: 0.0107061 0.0988616 0.0888549 0.812004 #>  #> Final Estimate of the Negative LLH: #>  LLH:  -861.9494    norm LLH:  -4.309747  #>           mu        omega       alpha1        beta1  #> 3.541769e-05 1.081941e-06 8.885493e-02 8.120038e-01  #>  #> R-optimhess Difference Approximated Hessian Matrix: #>                   mu         omega        alpha1         beta1 #> mu     -2.110947e+07 -4.842148e+08  2.852385e+03 -1.458198e+03 #> omega  -4.842148e+08 -2.671144e+13 -2.328641e+08 -2.747076e+08 #> alpha1  2.852385e+03 -2.328641e+08 -2.618403e+03 -2.563703e+03 #> beta1  -1.458198e+03 -2.747076e+08 -2.563703e+03 -2.938561e+03 #> attr(,\"time\") #> Time difference of 0.004027128 secs #>  #> --- END OF TRACE --- #>  #>  #> Time to Estimate Parameters: #>  Time difference of 0.02163911 secs #>  #> Title: #>  GARCH Modelling  #>  #> Call: #>  garchFit(formula = GARCH11 ~ garch(1, 1), data = X.mat)  #>  #> Mean and Variance Equation: #>  GARCH11 ~ garch(1, 1) #> <environment: 0x569a0b6b9d80> #>  [data = X.mat] #>  #> Conditional Distribution: #>  norm  #>  #> Coefficient(s): #>         mu       omega      alpha1       beta1   #> 3.5418e-05  1.0819e-06  8.8855e-02  8.1200e-01   #>  #> Std. Errors: #>  based on Hessian  #>  #> Error Analysis: #>         Estimate  Std. Error  t value Pr(>|t|)     #> mu     3.542e-05   2.183e-04    0.162    0.871     #> omega  1.082e-06   1.051e-06    1.030    0.303     #> alpha1 8.885e-02   5.450e-02    1.630    0.103     #> beta1  8.120e-01   1.242e-01    6.538 6.25e-11 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Log Likelihood: #>  861.9494    normalized:  4.309747  #>  #> Description: #>  Tue Apr 30 14:51:49 2024 by user: georgi  #>      # A multivariate timeSeries object with dummy dates:    X.timeSeries = dummyDailySeries(X.mat, units = c(\"GARCH11\", \"R\"))    garchFit(GARCH11 ~ garch(1,1), data = X.timeSeries) #>  #> Series Initialization: #>  ARMA Model:                arma #>  Formula Mean:              ~ arma(0, 0) #>  GARCH Model:               garch #>  Formula Variance:          ~ garch(1, 1) #>  ARMA Order:                0 0 #>  Max ARMA Order:            0 #>  GARCH Order:               1 1 #>  Max GARCH Order:           1 #>  Maximum Order:             1 #>  Conditional Dist:          norm #>  h.start:                   2 #>  llh.start:                 1 #>  Length of Series:          200 #>  Recursion Init:            mci #>  Series Scale:              0.003308171 #>  #> Parameter Initialization: #>  Initial Parameters:          $params #>  Limits of Transformations:   $U, $V #>  Which Parameters are Fixed?  $includes #>  Parameter Matrix: #>                      U            V       params includes #>     mu     -0.05516776   0.05516776 -0.005516776     TRUE #>     omega   0.00000100 100.00000000  0.100000000     TRUE #>     alpha1  0.00000001   0.99999999  0.100000000     TRUE #>     gamma1 -0.99999999   0.99999999  0.100000000    FALSE #>     beta1   0.00000001   0.99999999  0.800000000     TRUE #>     delta   0.00000000   2.00000000  2.000000000    FALSE #>     skew    0.10000000  10.00000000  1.000000000    FALSE #>     shape   1.00000000  10.00000000  4.000000000    FALSE #>  Index List of Parameters to be Optimized: #>     mu  omega alpha1  beta1  #>      1      2      3      5  #>  Persistence:                  0.9  #>  #>  #> --- START OF TRACE --- #> Selected Algorithm: nlminb  #>  #> R coded nlminb Solver:  #>  #>   0:     280.37902: -0.00551678 0.100000 0.100000 0.800000 #>   1:     280.37507: -0.00551675 0.101085 0.0997614 0.800840 #>   2:     280.37172: -0.00551671 0.100985 0.0984074 0.800529 #>   3:     280.36889: -0.00551668 0.102056 0.0981374 0.801378 #>   4:     280.36553: -0.00551664 0.101972 0.0967732 0.801110 #>   5:     280.36291: -0.00551659 0.102982 0.0962621 0.801921 #>   6:     280.36028: -0.00551652 0.102987 0.0948733 0.801815 #>   7:     280.35812: -0.00551642 0.103857 0.0941985 0.802668 #>   8:     280.35640: -0.00551626 0.103796 0.0928284 0.802909 #>   9:     280.35510: -0.00551594 0.104079 0.0921544 0.804093 #>  10:     280.35429: -0.00551543 0.103412 0.0912751 0.804938 #>  11:     280.35380: -0.00551470 0.102925 0.0909305 0.806189 #>  12:     280.35345: -0.00551337 0.102118 0.0903861 0.807156 #>  13:     280.35308: -0.00550880 0.101958 0.0898304 0.808116 #>  14:     280.35296: -0.00550326 0.101305 0.0896346 0.808798 #>  15:     280.35287: -0.00549602 0.101693 0.0894169 0.808659 #>  16:     280.35280: -0.00548956 0.101338 0.0890255 0.809195 #>  17:     280.35270: -0.00548306 0.100990 0.0889425 0.809846 #>  18:     280.35261: -0.00546712 0.100295 0.0886753 0.810712 #>  19:     280.35191: -0.00526092 0.100384 0.0880880 0.811016 #>  20:     280.34947: -0.00443606 0.0998012 0.0868493 0.812628 #>  21:     280.34213: -0.00121747 0.0993041 0.0846804 0.814752 #>  22:     280.33288: 0.00415509 0.0983925 0.0835405 0.816652 #>  23:     280.32556: 0.00933509 0.0984673 0.0851411 0.815292 #>  24:     280.32295: 0.0112564 0.0984683 0.0875808 0.813418 #>  25:     280.32262: 0.0109708 0.0988384 0.0887005 0.812137 #>  26:     280.32261: 0.0107322 0.0988356 0.0888526 0.812038 #>  27:     280.32261: 0.0107066 0.0988719 0.0888596 0.811988 #>  28:     280.32261: 0.0107061 0.0988616 0.0888549 0.812004 #>  #> Final Estimate of the Negative LLH: #>  LLH:  -861.9494    norm LLH:  -4.309747  #>           mu        omega       alpha1        beta1  #> 3.541769e-05 1.081941e-06 8.885493e-02 8.120038e-01  #>  #> R-optimhess Difference Approximated Hessian Matrix: #>                   mu         omega        alpha1         beta1 #> mu     -2.110947e+07 -4.842148e+08  2.852385e+03 -1.458198e+03 #> omega  -4.842148e+08 -2.671144e+13 -2.328641e+08 -2.747076e+08 #> alpha1  2.852385e+03 -2.328641e+08 -2.618403e+03 -2.563703e+03 #> beta1  -1.458198e+03 -2.747076e+08 -2.563703e+03 -2.938561e+03 #> attr(,\"time\") #> Time difference of 0.003959179 secs #>  #> --- END OF TRACE --- #>  #>  #> Time to Estimate Parameters: #>  Time difference of 0.02163386 secs #>  #> Title: #>  GARCH Modelling  #>  #> Call: #>  garchFit(formula = GARCH11 ~ garch(1, 1), data = X.timeSeries)  #>  #> Mean and Variance Equation: #>  GARCH11 ~ garch(1, 1) #> <environment: 0x569a0b6b9d80> #>  [data = X.timeSeries] #>  #> Conditional Distribution: #>  norm  #>  #> Coefficient(s): #>         mu       omega      alpha1       beta1   #> 3.5418e-05  1.0819e-06  8.8855e-02  8.1200e-01   #>  #> Std. Errors: #>  based on Hessian  #>  #> Error Analysis: #>         Estimate  Std. Error  t value Pr(>|t|)     #> mu     3.542e-05   2.183e-04    0.162    0.871     #> omega  1.082e-06   1.051e-06    1.030    0.303     #> alpha1 8.885e-02   5.450e-02    1.630    0.103     #> beta1  8.120e-01   1.242e-01    6.538 6.25e-11 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Log Likelihood: #>  861.9494    normalized:  4.309747  #>  #> Description: #>  Tue Apr 30 14:51:49 2024 by user: georgi  #>   if (FALSE) {    # A multivariate zoo object:    X.zoo = zoo(X.mat, order.by = as.Date(rownames(x.timeSeries)))    garchFit(GARCH11 ~ garch(1,1), data = X.zoo) }     # A multivariate \"mts\" object:    X.mts = as.ts(X.mat)    garchFit(GARCH11 ~ garch(1,1), data = X.mts) #>  #> Series Initialization: #>  ARMA Model:                arma #>  Formula Mean:              ~ arma(0, 0) #>  GARCH Model:               garch #>  Formula Variance:          ~ garch(1, 1) #>  ARMA Order:                0 0 #>  Max ARMA Order:            0 #>  GARCH Order:               1 1 #>  Max GARCH Order:           1 #>  Maximum Order:             1 #>  Conditional Dist:          norm #>  h.start:                   2 #>  llh.start:                 1 #>  Length of Series:          200 #>  Recursion Init:            mci #>  Series Scale:              0.003308171 #>  #> Parameter Initialization: #>  Initial Parameters:          $params #>  Limits of Transformations:   $U, $V #>  Which Parameters are Fixed?  $includes #>  Parameter Matrix: #>                      U            V       params includes #>     mu     -0.05516776   0.05516776 -0.005516776     TRUE #>     omega   0.00000100 100.00000000  0.100000000     TRUE #>     alpha1  0.00000001   0.99999999  0.100000000     TRUE #>     gamma1 -0.99999999   0.99999999  0.100000000    FALSE #>     beta1   0.00000001   0.99999999  0.800000000     TRUE #>     delta   0.00000000   2.00000000  2.000000000    FALSE #>     skew    0.10000000  10.00000000  1.000000000    FALSE #>     shape   1.00000000  10.00000000  4.000000000    FALSE #>  Index List of Parameters to be Optimized: #>     mu  omega alpha1  beta1  #>      1      2      3      5  #>  Persistence:                  0.9  #>  #>  #> --- START OF TRACE --- #> Selected Algorithm: nlminb  #>  #> R coded nlminb Solver:  #>  #>   0:     280.37902: -0.00551678 0.100000 0.100000 0.800000 #>   1:     280.37507: -0.00551675 0.101085 0.0997614 0.800840 #>   2:     280.37172: -0.00551671 0.100985 0.0984074 0.800529 #>   3:     280.36889: -0.00551668 0.102056 0.0981374 0.801378 #>   4:     280.36553: -0.00551664 0.101972 0.0967732 0.801110 #>   5:     280.36291: -0.00551659 0.102982 0.0962621 0.801921 #>   6:     280.36028: -0.00551652 0.102987 0.0948733 0.801815 #>   7:     280.35812: -0.00551642 0.103857 0.0941985 0.802668 #>   8:     280.35640: -0.00551626 0.103796 0.0928284 0.802909 #>   9:     280.35510: -0.00551594 0.104079 0.0921544 0.804093 #>  10:     280.35429: -0.00551543 0.103412 0.0912751 0.804938 #>  11:     280.35380: -0.00551470 0.102925 0.0909305 0.806189 #>  12:     280.35345: -0.00551337 0.102118 0.0903861 0.807156 #>  13:     280.35308: -0.00550880 0.101958 0.0898304 0.808116 #>  14:     280.35296: -0.00550326 0.101305 0.0896346 0.808798 #>  15:     280.35287: -0.00549602 0.101693 0.0894169 0.808659 #>  16:     280.35280: -0.00548956 0.101338 0.0890255 0.809195 #>  17:     280.35270: -0.00548306 0.100990 0.0889425 0.809846 #>  18:     280.35261: -0.00546712 0.100295 0.0886753 0.810712 #>  19:     280.35191: -0.00526092 0.100384 0.0880880 0.811016 #>  20:     280.34947: -0.00443606 0.0998012 0.0868493 0.812628 #>  21:     280.34213: -0.00121747 0.0993041 0.0846804 0.814752 #>  22:     280.33288: 0.00415509 0.0983925 0.0835405 0.816652 #>  23:     280.32556: 0.00933509 0.0984673 0.0851411 0.815292 #>  24:     280.32295: 0.0112564 0.0984683 0.0875808 0.813418 #>  25:     280.32262: 0.0109708 0.0988384 0.0887005 0.812137 #>  26:     280.32261: 0.0107322 0.0988356 0.0888526 0.812038 #>  27:     280.32261: 0.0107066 0.0988719 0.0888596 0.811988 #>  28:     280.32261: 0.0107061 0.0988616 0.0888549 0.812004 #>  #> Final Estimate of the Negative LLH: #>  LLH:  -861.9494    norm LLH:  -4.309747  #>           mu        omega       alpha1        beta1  #> 3.541769e-05 1.081941e-06 8.885493e-02 8.120038e-01  #>  #> R-optimhess Difference Approximated Hessian Matrix: #>                   mu         omega        alpha1         beta1 #> mu     -2.110947e+07 -4.842148e+08  2.852385e+03 -1.458198e+03 #> omega  -4.842148e+08 -2.671144e+13 -2.328641e+08 -2.747076e+08 #> alpha1  2.852385e+03 -2.328641e+08 -2.618403e+03 -2.563703e+03 #> beta1  -1.458198e+03 -2.747076e+08 -2.563703e+03 -2.938561e+03 #> attr(,\"time\") #> Time difference of 0.003915787 secs #>  #> --- END OF TRACE --- #>  #>  #> Time to Estimate Parameters: #>  Time difference of 0.02603769 secs #>  #> Title: #>  GARCH Modelling  #>  #> Call: #>  garchFit(formula = GARCH11 ~ garch(1, 1), data = X.mts)  #>  #> Mean and Variance Equation: #>  GARCH11 ~ garch(1, 1) #> <environment: 0x569a0b6b9d80> #>  [data = X.mts] #>  #> Conditional Distribution: #>  norm  #>  #> Coefficient(s): #>         mu       omega      alpha1       beta1   #> 3.5418e-05  1.0819e-06  8.8855e-02  8.1200e-01   #>  #> Std. Errors: #>  based on Hessian  #>  #> Error Analysis: #>         Estimate  Std. Error  t value Pr(>|t|)     #> mu     3.542e-05   2.183e-04    0.162    0.871     #> omega  1.082e-06   1.051e-06    1.030    0.303     #> alpha1 8.885e-02   5.450e-02    1.630    0.103     #> beta1  8.120e-01   1.242e-01    6.538 6.25e-11 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Log Likelihood: #>  861.9494    normalized:  4.309747  #>  #> Description: #>  Tue Apr 30 14:51:50 2024 by user: georgi  #>   ## MODELING THE PERCENTUAL SPI/SBI SPREAD FROM LPP BENCHMARK:     stopifnot(require(\"timeSeries\"))    X.timeSeries = as.timeSeries(data(LPP2005REC))    X.mat = as.matrix(X.timeSeries)    if (FALSE) X.zoo = zoo(X.mat, order.by = as.Date(rownames(X.mat)))    X.mts = ts(X.mat)    garchFit(100*(SPI - SBI) ~ garch(1,1), data = X.timeSeries) #>  #> Series Initialization: #>  ARMA Model:                arma #>  Formula Mean:              ~ arma(0, 0) #>  GARCH Model:               garch #>  Formula Variance:          ~ garch(1, 1) #>  ARMA Order:                0 0 #>  Max ARMA Order:            0 #>  GARCH Order:               1 1 #>  Max GARCH Order:           1 #>  Maximum Order:             1 #>  Conditional Dist:          norm #>  h.start:                   2 #>  llh.start:                 1 #>  Length of Series:          377 #>  Recursion Init:            mci #>  Series Scale:              0.7911981 #>  #> Parameter Initialization: #>  Initial Parameters:          $params #>  Limits of Transformations:   $U, $V #>  Which Parameters are Fixed?  $includes #>  Parameter Matrix: #>                      U          V    params includes #>     mu     -1.06338438   1.063384 0.1063384     TRUE #>     omega   0.00000100 100.000000 0.1000000     TRUE #>     alpha1  0.00000001   1.000000 0.1000000     TRUE #>     gamma1 -0.99999999   1.000000 0.1000000    FALSE #>     beta1   0.00000001   1.000000 0.8000000     TRUE #>     delta   0.00000000   2.000000 2.0000000    FALSE #>     skew    0.10000000  10.000000 1.0000000    FALSE #>     shape   1.00000000  10.000000 4.0000000    FALSE #>  Index List of Parameters to be Optimized: #>     mu  omega alpha1  beta1  #>      1      2      3      5  #>  Persistence:                  0.9  #>  #>  #> --- START OF TRACE --- #> Selected Algorithm: nlminb  #>  #> R coded nlminb Solver:  #>  #>   0:     509.82704: 0.106338 0.100000 0.100000 0.800000 #>   1:     509.51991: 0.106356 0.0941456 0.0992929 0.796649 #>   2:     509.34861: 0.106401 0.0914068 0.105150 0.798661 #>   3:     509.31324: 0.106450 0.0850532 0.106653 0.796875 #>   4:     509.18616: 0.106664 0.0845871 0.109854 0.802489 #>   5:     509.13752: 0.107048 0.0796272 0.109273 0.805331 #>   6:     509.11455: 0.107636 0.0785584 0.109980 0.809041 #>   7:     509.09156: 0.108344 0.0773904 0.109886 0.808412 #>   8:     508.86157: 0.130216 0.0904027 0.123041 0.783222 #>   9:     508.76023: 0.151709 0.0685017 0.102923 0.822562 #>  10:     508.74002: 0.151708 0.0695354 0.103784 0.823131 #>  11:     508.73297: 0.151702 0.0694221 0.104546 0.821891 #>  12:     508.72844: 0.151608 0.0697581 0.105658 0.821808 #>  13:     508.72336: 0.151493 0.0696262 0.105848 0.820859 #>  14:     508.71847: 0.151405 0.0705829 0.106223 0.820227 #>  15:     508.71404: 0.151289 0.0705200 0.106456 0.819285 #>  16:     508.71023: 0.151174 0.0708824 0.107305 0.818955 #>  17:     508.70624: 0.151057 0.0709395 0.107483 0.818015 #>  18:     508.70241: 0.150956 0.0717984 0.107803 0.817387 #>  19:     508.69901: 0.150836 0.0716372 0.108257 0.816599 #>  20:     508.69619: 0.150718 0.0720058 0.109044 0.816221 #>  21:     508.68815: 0.150061 0.0750247 0.109122 0.812611 #>  22:     508.67779: 0.149315 0.0751932 0.111191 0.809976 #>  23:     508.67153: 0.148688 0.0766777 0.114346 0.806316 #>  24:     508.67090: 0.149243 0.0770851 0.115532 0.804599 #>  25:     508.67086: 0.148699 0.0770358 0.115443 0.804762 #>  26:     508.67085: 0.148859 0.0770391 0.115425 0.804785 #>  27:     508.67085: 0.148857 0.0770402 0.115430 0.804778 #>  #> Final Estimate of the Negative LLH: #>  LLH:  420.3749    norm LLH:  1.115053  #>         mu      omega     alpha1      beta1  #> 0.11777514 0.04822674 0.11543003 0.80477759  #>  #> R-optimhess Difference Approximated Hessian Matrix: #>                mu        omega      alpha1        beta1 #> mu     -822.50417    -66.39566    44.87188    -46.12927 #> omega   -66.39566 -22459.56936 -7066.22458 -10357.90647 #> alpha1   44.87188  -7066.22458 -4084.55043  -4274.92985 #> beta1   -46.12927 -10357.90647 -4274.92985  -5674.92502 #> attr(,\"time\") #> Time difference of 0.004879951 secs #>  #> --- END OF TRACE --- #>  #>  #> Time to Estimate Parameters: #>  Time difference of 0.02381349 secs #>  #> Title: #>  GARCH Modelling  #>  #> Call: #>  garchFit(formula = 100 * (SPI - SBI) ~ garch(1, 1), data = X.timeSeries)  #>  #> Mean and Variance Equation: #>  100 * (SPI - SBI) ~ garch(1, 1) #> <environment: 0x569a0b6b9d80> #>  [data = X.timeSeries] #>  #> Conditional Distribution: #>  norm  #>  #> Coefficient(s): #>       mu     omega    alpha1     beta1   #> 0.117775  0.048227  0.115430  0.804778   #>  #> Std. Errors: #>  based on Hessian  #>  #> Error Analysis: #>         Estimate  Std. Error  t value Pr(>|t|)     #> mu       0.11778     0.03509    3.357 0.000789 *** #> omega    0.04823     0.01851    2.605 0.009186 **  #> alpha1   0.11543     0.03771    3.061 0.002206 **  #> beta1    0.80478     0.05422   14.842  < 2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Log Likelihood: #>  -420.3749    normalized:  -1.115053  #>  #> Description: #>  Tue Apr 30 14:51:50 2024 by user: georgi  #>     # The remaining are not yet supported ...    # garchFit(100*(SPI - SBI) ~ garch(1,1), data = X.mat)    # garchFit(100*(SPI - SBI) ~ garch(1,1), data = X.zoo)    # garchFit(100*(SPI - SBI) ~ garch(1,1), data = X.mts)  ## MODELING HIGH/LOW RETURN SPREADS FROM MSFT PRICE SERIES:     X.timeSeries = MSFT    garchFit(Open ~ garch(1,1), data = returns(X.timeSeries)) #>  #> Series Initialization: #>  ARMA Model:                arma #>  Formula Mean:              ~ arma(0, 0) #>  GARCH Model:               garch #>  Formula Variance:          ~ garch(1, 1) #>  ARMA Order:                0 0 #>  Max ARMA Order:            0 #>  GARCH Order:               1 1 #>  Max GARCH Order:           1 #>  Maximum Order:             1 #>  Conditional Dist:          norm #>  h.start:                   2 #>  llh.start:                 1 #>  Length of Series:          248 #>  Recursion Init:            mci #>  Series Scale:              0.03467707 #>  #> Parameter Initialization: #>  Initial Parameters:          $params #>  Limits of Transformations:   $U, $V #>  Which Parameters are Fixed?  $includes #>  Parameter Matrix: #>                      U           V      params includes #>     mu     -0.27446113   0.2744611 -0.02744611     TRUE #>     omega   0.00000100 100.0000000  0.10000000     TRUE #>     alpha1  0.00000001   1.0000000  0.10000000     TRUE #>     gamma1 -0.99999999   1.0000000  0.10000000    FALSE #>     beta1   0.00000001   1.0000000  0.80000000     TRUE #>     delta   0.00000000   2.0000000  2.00000000    FALSE #>     skew    0.10000000  10.0000000  1.00000000    FALSE #>     shape   1.00000000  10.0000000  4.00000000    FALSE #>  Index List of Parameters to be Optimized: #>     mu  omega alpha1  beta1  #>      1      2      3      5  #>  Persistence:                  0.9  #>  #>  #> --- START OF TRACE --- #> Selected Algorithm: nlminb  #>  #> R coded nlminb Solver:  #>  #>   0:     342.27498: -0.0274461 0.100000 0.100000 0.800000 #>   1:     340.94425: -0.0274245 0.0415953 0.171831 0.810282 #>   2:     340.93440: -0.0274205 0.0422745 0.170657 0.808213 #>   3:     340.92348: -0.0274161 0.0447136 0.170835 0.807844 #>   4:     340.91370: -0.0274100 0.0453986 0.169929 0.805652 #>   5:     340.90869: -0.0274003 0.0476051 0.170026 0.804585 #>   6:     340.90521: -0.0273777 0.0482184 0.169865 0.802336 #>   7:     340.90248: -0.0273321 0.0489754 0.171281 0.801438 #>   8:     340.89717: -0.0270041 0.0480428 0.177299 0.797774 #>   9:     340.86736: -0.0231806 0.0537295 0.174808 0.789982 #>  10:     340.73004: -0.0101016 0.0439580 0.164309 0.806907 #>  11:     340.56766: 0.0160790 0.0439679 0.183551 0.801336 #>  12:     340.52900: 0.0197153 0.0459647 0.190266 0.789344 #>  13:     340.52544: 0.0172714 0.0457522 0.185566 0.793380 #>  14:     340.52539: 0.0175126 0.0455331 0.185311 0.793841 #>  15:     340.52539: 0.0175241 0.0455418 0.185276 0.793848 #>  16:     340.52539: 0.0175254 0.0455424 0.185274 0.793849 #>  #> Final Estimate of the Negative LLH: #>  LLH:  -493.1704    norm LLH:  -1.98859  #>           mu        omega       alpha1        beta1  #> 6.077311e-04 5.476465e-05 1.852739e-01 7.938490e-01  #>  #> R-optimhess Difference Approximated Hessian Matrix: #>                  mu       omega       alpha1        beta1 #> mu      -323896.988    -3942880    -1274.877    -2692.172 #> omega  -3942880.327 -3716487012 -2283988.677 -3321697.132 #> alpha1    -1274.877    -2283989    -1841.165    -2492.527 #> beta1     -2692.172    -3321697    -2492.527    -3686.317 #> attr(,\"time\") #> Time difference of 0.004188299 secs #>  #> --- END OF TRACE --- #>  #>  #> Time to Estimate Parameters: #>  Time difference of 0.01663399 secs #>  #> Title: #>  GARCH Modelling  #>  #> Call: #>  garchFit(formula = Open ~ garch(1, 1), data = returns(X.timeSeries))  #>  #> Mean and Variance Equation: #>  Open ~ garch(1, 1) #> <environment: 0x569a0b6b9d80> #>  [data = returns(X.timeSeries)] #>  #> Conditional Distribution: #>  norm  #>  #> Coefficient(s): #>         mu       omega      alpha1       beta1   #> 6.0773e-04  5.4765e-05  1.8527e-01  7.9385e-01   #>  #> Std. Errors: #>  based on Hessian  #>  #> Error Analysis: #>         Estimate  Std. Error  t value Pr(>|t|)     #> mu     6.077e-04   1.778e-03    0.342   0.7325     #> omega  5.476e-05   3.765e-05    1.455   0.1458     #> alpha1 1.853e-01   8.095e-02    2.289   0.0221 *   #> beta1  7.938e-01   6.301e-02   12.599   <2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Log Likelihood: #>  493.1704    normalized:  1.98859  #>  #> Description: #>  Tue Apr 30 14:51:50 2024 by user: georgi  #>     garchFit(100*(High-Low) ~ garch(1,1), data = returns(X.timeSeries)) #>  #> Series Initialization: #>  ARMA Model:                arma #>  Formula Mean:              ~ arma(0, 0) #>  GARCH Model:               garch #>  Formula Variance:          ~ garch(1, 1) #>  ARMA Order:                0 0 #>  Max ARMA Order:            0 #>  GARCH Order:               1 1 #>  Max GARCH Order:           1 #>  Maximum Order:             1 #>  Conditional Dist:          norm #>  h.start:                   2 #>  llh.start:                 1 #>  Length of Series:          248 #>  Recursion Init:            mci #>  Series Scale:              1.759168 #>  #> Parameter Initialization: #>  Initial Parameters:          $params #>  Limits of Transformations:   $U, $V #>  Which Parameters are Fixed?  $includes #>  Parameter Matrix: #>                      U            V       params includes #>     mu     -0.01484999   0.01484999 -0.001484999     TRUE #>     omega   0.00000100 100.00000000  0.100000000     TRUE #>     alpha1  0.00000001   0.99999999  0.100000000     TRUE #>     gamma1 -0.99999999   0.99999999  0.100000000    FALSE #>     beta1   0.00000001   0.99999999  0.800000000     TRUE #>     delta   0.00000000   2.00000000  2.000000000    FALSE #>     skew    0.10000000  10.00000000  1.000000000    FALSE #>     shape   1.00000000  10.00000000  4.000000000    FALSE #>  Index List of Parameters to be Optimized: #>     mu  omega alpha1  beta1  #>      1      2      3      5  #>  Persistence:                  0.9  #>  #>  #> --- START OF TRACE --- #> Selected Algorithm: nlminb  #>  #> R coded nlminb Solver:  #>  #>   0:     338.79385: -0.00148500 0.100000 0.100000 0.800000 #>   1:     338.46090: -0.00148500 0.0930914 0.100064 0.793760 #>   2:     338.24428: -0.00148500 0.0927929 0.109355 0.793249 #>   3:     338.13232: -0.00148499 0.0865650 0.112004 0.786856 #>   4:     337.95165: -0.00148499 0.0903645 0.120451 0.785916 #>   5:     337.83363: -0.00148498 0.0880066 0.123980 0.777629 #>   6:     337.71984: -0.00148497 0.0934008 0.130363 0.773527 #>   7:     337.62836: -0.00148495 0.0936956 0.132882 0.764569 #>   8:     337.54525: -0.00148493 0.0995383 0.138251 0.759700 #>   9:     337.47146: -0.00148490 0.100375 0.140485 0.750701 #>  10:     337.40214: -0.00148486 0.106092 0.145870 0.745701 #>  11:     337.33811: -0.00148478 0.106731 0.148700 0.736855 #>  12:     337.27971: -0.00148466 0.112207 0.154164 0.731676 #>  13:     337.22953: -0.00148446 0.113576 0.156827 0.722862 #>  14:     337.17847: -0.00148403 0.118016 0.163018 0.717519 #>  15:     337.15010: -0.00148366 0.121418 0.163737 0.708886 #>  16:     337.12658: -0.00148293 0.117033 0.171770 0.710523 #>  17:     337.08704: -0.00148284 0.122915 0.178235 0.693051 #>  18:     337.03054: -0.00148210 0.136576 0.184775 0.680722 #>  19:     337.00277: -0.00148078 0.144688 0.188565 0.663381 #>  20:     336.98756: -0.00147267 0.154426 0.195482 0.648918 #>  21:     336.97675: -0.00144968 0.154594 0.204920 0.641641 #>  22:     336.97583: -0.00142340 0.157318 0.206707 0.637693 #>  23:     336.97552: -0.00139450 0.158213 0.207352 0.636343 #>  24:     336.97467: -0.00128837 0.159968 0.208616 0.633682 #>  25:     336.97264: -0.000975485 0.163087 0.210866 0.628926 #>  26:     336.96825: -0.000197740 0.167982 0.214399 0.621399 #>  27:     336.95854: 0.00166593 0.175778 0.220016 0.609263 #>  28:     336.93800: 0.00599522 0.188577 0.229193 0.588989 #>  29:     336.90456: 0.0144044 0.207806 0.242786 0.557755 #>  30:     336.89568: 0.0148500 0.204967 0.240403 0.561330 #>  31:     336.89184: 0.0148500 0.157893 0.205616 0.629260 #>  32:     336.86883: 0.0148500 0.184188 0.226104 0.592041 #>  33:     336.85962: 0.0148500 0.173554 0.219500 0.608290 #>  34:     336.85725: 0.0148500 0.155984 0.209335 0.635860 #>  35:     336.85498: 0.0148500 0.164112 0.214240 0.623640 #>  36:     336.85486: 0.0148500 0.163014 0.213762 0.625457 #>  37:     336.85485: 0.0148500 0.162753 0.213693 0.625907 #>  38:     336.85485: 0.0148500 0.162780 0.213714 0.625865 #>  39:     336.85485: 0.0148500 0.162785 0.213717 0.625858 #>  #> Final Estimate of the Negative LLH: #>  LLH:  476.9354    norm LLH:  1.923127  #>         mu      omega     alpha1      beta1  #> 0.02612363 0.50376670 0.21371740 0.62585764  #>  #> R-optimhess Difference Approximated Hessian Matrix: #>                 mu      omega      alpha1       beta1 #> mu     -132.010667  -11.71868    6.265931   -31.66371 #> omega   -11.718680 -165.10094 -231.511196  -402.35533 #> alpha1    6.265931 -231.51120 -664.732441  -708.75592 #> beta1   -31.663715 -402.35533 -708.755923 -1073.12968 #> attr(,\"time\") #> Time difference of 0.004318714 secs #>  #> --- END OF TRACE --- #>  #>  #> Time to Estimate Parameters: #>  Time difference of 0.02533388 secs #>  #> Title: #>  GARCH Modelling  #>  #> Call: #>  garchFit(formula = 100 * (High - Low) ~ garch(1, 1), data = returns(X.timeSeries))  #>  #> Mean and Variance Equation: #>  100 * (High - Low) ~ garch(1, 1) #> <environment: 0x569a0b6b9d80> #>  [data = returns(X.timeSeries)] #>  #> Conditional Distribution: #>  norm  #>  #> Coefficient(s): #>       mu     omega    alpha1     beta1   #> 0.026124  0.503767  0.213717  0.625858   #>  #> Std. Errors: #>  based on Hessian  #>  #> Error Analysis: #>         Estimate  Std. Error  t value Pr(>|t|)     #> mu       0.02612     0.08964    0.291 0.770733     #> omega    0.50377     0.35141    1.434 0.151694     #> alpha1   0.21372     0.09596    2.227 0.025941 *   #> beta1    0.62586     0.18294    3.421 0.000623 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Log Likelihood: #>  -476.9354    normalized:  -1.923127  #>  #> Description: #>  Tue Apr 30 14:51:50 2024 by user: georgi  #>   ## GO-GARCH Modelling  (not yet!!) % FIXME    ## data(DowJones30, package=\"fEcofin\") # no longer exists   ## X = returns(as.timeSeries(DowJones30)); head(X)   ## N = 5; ans = .gogarchFit(data = X[, 1:N], trace = FALSE); ans   ## ans@h.t"},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchFitControl.html","id":null,"dir":"Reference","previous_headings":"","what":"Control GARCH fitting algorithms — garchFitControl","title":"Control GARCH fitting algorithms — garchFitControl","text":"Control parameters GARCH fitting algorithms.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchFitControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control GARCH fitting algorithms — garchFitControl","text":"","code":"garchFitControl(     llh = c(\"filter\", \"internal\", \"testing\"),     nlminb.eval.max = 2000,     nlminb.iter.max = 1500,     nlminb.abs.tol = 1.0e-20,     nlminb.rel.tol = 1.0e-14,     nlminb.x.tol = 1.0e-14,     nlminb.step.min = 2.2e-14,     nlminb.scale = 1,     nlminb.fscale = FALSE,     nlminb.xscale = FALSE,     sqp.mit = 200,     sqp.mfv = 500,     sqp.met = 2,     sqp.mec = 2,     sqp.mer = 1,     sqp.mes = 4,     sqp.xmax = 1.0e3,     sqp.tolx = 1.0e-16,     sqp.tolc = 1.0e-6,     sqp.tolg = 1.0e-6,     sqp.told = 1.0e-6,     sqp.tols = 1.0e-4,     sqp.rpf = 1.0e-4,     lbfgsb.REPORT = 10,     lbfgsb.lmm = 20,     lbfgsb.pgtol = 1e-14,     lbfgsb.factr = 1,     lbfgsb.fnscale = FALSE,     lbfgsb.parscale = FALSE,     nm.ndeps = 1e-14,     nm.maxit = 10000,     nm.abstol = 1e-14,     nm.reltol = 1e-14,     nm.alpha = 1.0,     nm.beta = 0.5,     nm.gamma = 2.0,     nm.fnscale = FALSE,     nm.parscale = FALSE)"},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchFitControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control GARCH fitting algorithms — garchFitControl","text":"llh llh = c(\"filter\", \"internal\", \"testing\")[1],     defaults \"filter\".  nlminb.eval.max maximum number evaluations objective function,     defaults 200. nlminb.iter.max maximum number iterations, defaults 150.          nlminb.abs.tol absolute tolerance, defaults 1e-20. nlminb.rel.tol relative tolerance, defaults 1e-10. nlminb.x.tol X tolerance, defaults 1.5e-8. nlminb.fscale defaults FALSE. nlminb.xscale defaulkts FALSE. nlminb.step.min minimum step size, defaults 2.2e-14. nlminb.scale defaults 1.        sqp.mit maximum number iterations, defaults 200. sqp.mfv maximum number function evaluations, defaults 500. sqp.met specifies scaling strategy:     sqp.met=1 - scaling,     sqp.met=2 - preliminary scaling 1st iteration (default),     sqp.met=3 - controlled scaling,     sqp.met=4 - interval scaling,     sqp.met=5 - permanent scaling iterations. sqp.mec correction negative curvature:     sqp.mec=1 - correction,     sqp.mec=2 - Powell correction (default). sqp.mer restarts unsuccessful variable metric updates:     sqp.mer=0 - restarts,     sqp.mer=1 - standard restart. sqp.mes interpolation method selection line search:     sqp.mes=1 - bisection,     sqp.mes=2 - two point quadratic interpolation,     sqp.mes=3 - three point quadratic interpolation,     sqp.mes=4 - three point cubic interpolation (default). sqp.xmax maximum stepsize, defaults 1.0e+3. sqp.tolx tolerance change coordinate vector,     defaults 1.0e-16. sqp.tolc tolerance constraint violation,     defaults 1.0e-6. sqp.tolg tolerance Lagrangian function gradient,     defaults 1.0e-6. sqp.told defaults 1.0e-6. sqp.tols defaults 1.0e-4. sqp.rpf value penalty coefficient,     default to1.0D-4.     default velue may relatively small. Therefore, larger     value, say one, can sometimes suitable.  lbfgsb.REPORT frequency reports \"BFGS\" \"L-BFGS-B\"     methods control$trace positive. Defaults every 10     iterations.  lbfgsb.lmm integer giving number BFGS updates retained     \"L-BFGS-B\" method, defaults 5. lbfgsb.factr controls convergence \"L-BFGS-B\"     method. Convergence occurs reduction objective     within factor machine tolerance. Default 1e7,     tolerance 1.0e-8.  lbfgsb.pgtol helps control convergence \"L-BFGS-B\" method.     tolerance projected gradient current search     direction. defaults zero, check suppressed.  lbfgsb.fnscale defaults FALSE. lbfgsb.parscale defaults FALSE.                nm.ndeps vector step sizes finite-difference approximation     gradient, par/parscale scale. Defaults 1e-3. nm.maxit maximum number iterations. Defaults 100     derivative-based methods, 500 \"Nelder-Mead\".     \"SANN\" maxit gives total number function     evaluations. stopping criterion. Defaults     10000.  nm.abstol absolute convergence tolerance. useful non-negative     functions, tolerance reaching zero. nm.reltol relative convergence tolerance. algorithm stops     unable reduce value factor     reltol * (abs(val) + reltol) step. Defaults     sqrt(.Machine$double.eps), typically 1e-8. nm.alpha, nm.beta, nm.gamma scaling parameters \"Nelder-Mead\" method.     alpha reflection factor (default 1.0),     beta contraction factor (0.5),     gamma expansion factor (2.0). nm.fnscale overall scaling applied value fn gr     optimization. negative, turns problem     maximization problem.  Optimization performed     fn(par) / nm.fnscale. nm.parscale vector scaling values parameters. Optimization     performed par/parscale comparable     sense unit change element produces unit     change scaled value.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchFitControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control GARCH fitting algorithms — garchFitControl","text":"list","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchFitControl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Control GARCH fitting algorithms — garchFitControl","text":"Diethelm Wuertz Rmetrics R-port,     R Core Team 'optim' R-port,     Douglas Bates Deepayan Sarkar 'nlminb' R-port,     Bell-Labs underlying PORT Library,     Ladislav Luksan underlying Fortran SQP Routine,      Zhu, Byrd, Lu-Chen Nocedal underlying L-BFGS-B Routine.","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchFitControl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control GARCH fitting algorithms — garchFitControl","text":"","code":"##"},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchSim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate univariate GARCH/APARCH time series — garchSim","title":"Simulate univariate GARCH/APARCH time series — garchSim","text":"Simulates univariate GARCH/APARCH time series.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate univariate GARCH/APARCH time series — garchSim","text":"","code":"garchSim(spec = garchSpec(), n = 100, n.start = 100, extended = FALSE)"},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchSim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate univariate GARCH/APARCH time series — garchSim","text":"spec specification object class \"fGARCHSPEC\"     returned garchSpec. See also     details.  n length output series, integer value, default     n=100.  n.start length ‘burn-’ period, default 100.  extended logical parameter specifying return. FALSE, return     univariate GARCH/APARCH time series. TRUE, return     multivariate time series containing also volatility     conditional innovations time series.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchSim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate univariate GARCH/APARCH time series — garchSim","text":"garchSim simulates univariate GARCH APARCH time series   process specified argument spec.  default model   specifies Bollerslev's GARCH(1,1) model normally distributed   innovations. spec object class \"fGARCHSPEC\" returned   function garchSpec. comes slot   @model list just numeric parameter   entries. recognized extracted use function   garchSim.  One can estimate parameters GARCH process empirical data   using function garchFit simulate statistically   equivalent GARCH processes set model parameters using   function garchSim.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchSim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate univariate GARCH/APARCH time series — garchSim","text":"simulated time series objects   class \"timeSeries\" attribute \"spec\" containing   specification model. extended TRUE, time series   multivariate contains also volatility, sigma,   conditional innovations, eps.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchSim.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Simulate univariate GARCH/APARCH time series — garchSim","text":"undocumented feature (, relied )   returned time series timed last observation day   date function executed. probably   controlled additional argument garchSim.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchSim.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate univariate GARCH/APARCH time series — garchSim","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchSim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate univariate GARCH/APARCH time series — garchSim","text":"","code":"## garchSpec -    spec = garchSpec()    spec #>  #> Formula:  #>  ~ garch(1, 1) #> Model: #>  omega: 1e-06 #>  alpha: 0.1 #>  beta:  0.8 #> Distribution:  #>  norm #> Presample:  #>   time          z     h y #> 1    0 -0.1207184 1e-05 0  ## garchSim -    # Simulate a \"timeSeries\" object:    x = garchSim(spec, n = 50)    class(x) #> [1] \"timeSeries\" #> attr(,\"package\") #> [1] \"timeSeries\"    print(x)  #> GMT  #>                    garch #> 2024-03-11 -2.911226e-03 #> 2024-03-12  2.777206e-03 #> 2024-03-13  2.293454e-03 #> 2024-03-14 -5.724560e-03 #> 2024-03-15 -5.579287e-03 #> 2024-03-16 -3.053223e-03 #> 2024-03-17 -5.901101e-03 #> 2024-03-18  1.982989e-03 #> 2024-03-19  2.311324e-04 #> 2024-03-20  1.591033e-03 #> 2024-03-21 -1.844240e-03 #> 2024-03-22  2.327273e-03 #> 2024-03-23 -2.810579e-03 #> 2024-03-24  4.083679e-03 #> 2024-03-25 -1.981109e-03 #> 2024-03-26 -2.736583e-03 #> 2024-03-27 -3.197631e-03 #> 2024-03-28 -2.687408e-03 #> 2024-03-29 -4.503115e-04 #> 2024-03-30 -9.716603e-04 #> 2024-03-31  1.665776e-03 #> 2024-04-01 -2.800591e-03 #> 2024-04-02  1.205845e-03 #> 2024-04-03  8.911127e-04 #> 2024-04-04 -3.355605e-03 #> 2024-04-05  6.375044e-04 #> 2024-04-06  6.992214e-03 #> 2024-04-07  2.302707e-03 #> 2024-04-08 -2.773734e-05 #> 2024-04-09 -6.103604e-03 #> 2024-04-10 -2.646679e-03 #> 2024-04-11  9.828453e-04 #> 2024-04-12  2.199372e-03 #> 2024-04-13 -1.669151e-03 #> 2024-04-14  4.976765e-04 #> 2024-04-15  1.773448e-03 #> 2024-04-16  4.240135e-04 #> 2024-04-17  2.872468e-03 #> 2024-04-18 -4.483632e-03 #> 2024-04-19  4.522951e-03 #> 2024-04-20 -5.253080e-03 #> 2024-04-21  1.227027e-03 #> 2024-04-22  5.491888e-03 #> 2024-04-23 -2.600418e-03 #> 2024-04-24  2.780861e-03 #> 2024-04-25  3.701203e-03 #> 2024-04-26  6.088748e-03 #> 2024-04-27 -1.635551e-03 #> 2024-04-28  1.800426e-03 #> 2024-04-29  5.328106e-03     ## More simulations ...     # Default GARCH(1,1) - uses default parameter settings    spec = garchSpec(model = list())    garchSim(spec, n = 10) #> GMT  #>                    garch #> 2024-04-20  1.106146e-03 #> 2024-04-21  4.758933e-03 #> 2024-04-22 -4.830058e-03 #> 2024-04-23 -1.673998e-03 #> 2024-04-24  4.252527e-03 #> 2024-04-25  1.028559e-03 #> 2024-04-26 -1.439446e-03 #> 2024-04-27  6.829775e-05 #> 2024-04-28  5.870645e-03 #> 2024-04-29  3.393152e-03        # ARCH(2) - use default omega and specify alpha, set beta=0!    spec = garchSpec(model = list(alpha = c(0.2, 0.4), beta = 0))    garchSim(spec, n = 10) #> GMT  #>                    garch #> 2024-04-20  0.0057975767 #> 2024-04-21 -0.0011834665 #> 2024-04-22  0.0017927422 #> 2024-04-23 -0.0008625608 #> 2024-04-24  0.0010001187 #> 2024-04-25  0.0030832726 #> 2024-04-26 -0.0018462440 #> 2024-04-27 -0.0023798962 #> 2024-04-28  0.0008704696 #> 2024-04-29  0.0007833472        # AR(1)-ARCH(2) - use default mu, omega    spec = garchSpec(model = list(ar = 0.5, alpha = c(0.3, 0.4), beta = 0))    garchSim(spec, n = 10) #> GMT  #>                    garch #> 2024-04-20 -0.0064929453 #> 2024-04-21 -0.0034116707 #> 2024-04-22 -0.0007531555 #> 2024-04-23 -0.0022603821 #> 2024-04-24 -0.0018410996 #> 2024-04-25 -0.0006229702 #> 2024-04-26 -0.0003279921 #> 2024-04-27  0.0012915726 #> 2024-04-28  0.0019140520 #> 2024-04-29  0.0005515873        # AR([1,5])-GARCH(1,1) - use default garch values and subset ar[.]    spec = garchSpec(model = list(mu = 0.001, ar = c(0.5,0,0,0,0.1)))    garchSim(spec, n = 10) #> GMT  #>                    garch #> 2024-04-20  0.0032399130 #> 2024-04-21  0.0022705751 #> 2024-04-22 -0.0002870203 #> 2024-04-23 -0.0011077627 #> 2024-04-24 -0.0031293745 #> 2024-04-25 -0.0017970990 #> 2024-04-26  0.0037490018 #> 2024-04-27  0.0057034846 #> 2024-04-28  0.0036035562 #> 2024-04-29  0.0039249405        # ARMA(1,2)-GARCH(1,1) - use default garch values    spec = garchSpec(model = list(ar = 0.5, ma = c(0.3, -0.3)))      garchSim(spec, n = 10) #> GMT  #>                    garch #> 2024-04-20  0.0043355134 #> 2024-04-21  0.0017659100 #> 2024-04-22 -0.0001591027 #> 2024-04-23  0.0019475098 #> 2024-04-24 -0.0010304484 #> 2024-04-25 -0.0030496409 #> 2024-04-26  0.0052197228 #> 2024-04-27  0.0022934947 #> 2024-04-28  0.0044816948 #> 2024-04-29  0.0024859766        # GARCH(1,1) - use default omega and specify alpha/beta    spec = garchSpec(model = list(alpha = 0.2, beta = 0.7))    garchSim(spec, n = 10) #> GMT  #>                    garch #> 2024-04-20 -0.0021716014 #> 2024-04-21 -0.0010676195 #> 2024-04-22 -0.0030764296 #> 2024-04-23 -0.0037004641 #> 2024-04-24  0.0004573765 #> 2024-04-25  0.0018448483 #> 2024-04-26 -0.0021326537 #> 2024-04-27  0.0010830056 #> 2024-04-28 -0.0026793967 #> 2024-04-29  0.0014976260        # GARCH(1,1) - specify omega/alpha/beta    spec = garchSpec(model = list(omega = 1e-6, alpha = 0.1, beta = 0.8))    garchSim(spec, n = 10) #> GMT  #>                    garch #> 2024-04-20  0.0017863687 #> 2024-04-21  0.0008059858 #> 2024-04-22  0.0032089856 #> 2024-04-23  0.0038018231 #> 2024-04-24  0.0022089156 #> 2024-04-25 -0.0007191500 #> 2024-04-26 -0.0004469074 #> 2024-04-27  0.0006013883 #> 2024-04-28 -0.0019554465 #> 2024-04-29 -0.0010905864        # GARCH(1,2) - use default omega and specify alpha[1]/beta[2]    spec = garchSpec(model = list(alpha = 0.1, beta = c(0.4, 0.4)))    garchSim(spec, n = 10) #> GMT  #>                    garch #> 2024-04-20  0.0019340643 #> 2024-04-21  0.0000668850 #> 2024-04-22  0.0010577411 #> 2024-04-23 -0.0016142765 #> 2024-04-24  0.0006535521 #> 2024-04-25  0.0008639688 #> 2024-04-26  0.0026345660 #> 2024-04-27 -0.0010614920 #> 2024-04-28 -0.0011161853 #> 2024-04-29  0.0004583598        # GARCH(2,1) - use default omega and specify alpha[2]/beta[1]    spec = garchSpec(model = list(alpha = c(0.12, 0.04), beta = 0.08))    garchSim(spec, n = 10) #> GMT  #>                    garch #> 2024-04-20 -8.562066e-05 #> 2024-04-21 -2.033166e-03 #> 2024-04-22 -9.540200e-04 #> 2024-04-23  3.912605e-04 #> 2024-04-24 -1.887491e-03 #> 2024-04-25 -1.231150e-04 #> 2024-04-26  1.352201e-03 #> 2024-04-27  7.294251e-04 #> 2024-04-28  2.526151e-03 #> 2024-04-29  4.799199e-04        # snorm-ARCH(1) - use defaults with skew Normal    spec = garchSpec(model = list(beta = 0, skew = 0.8), cond.dist = \"snorm\")    garchSim(spec, n = 10) #> GMT  #>                    garch #> 2024-04-20 -7.485606e-04 #> 2024-04-21  8.914988e-04 #> 2024-04-22 -5.381224e-04 #> 2024-04-23  2.703609e-04 #> 2024-04-24 -6.094172e-04 #> 2024-04-25  1.043383e-03 #> 2024-04-26  4.731667e-04 #> 2024-04-27  1.054015e-03 #> 2024-04-28 -5.737206e-04 #> 2024-04-29 -7.588362e-05        # sged-GARCH(1,1) - using defaults with skew GED    model = garchSpec(model = list(skew = 0.93, shape = 3), cond.dist = \"sged\")    garchSim(model, n = 10) #> GMT  #>                    garch #> 2024-04-20 -0.0002272700 #> 2024-04-21  0.0027759594 #> 2024-04-22  0.0013211663 #> 2024-04-23  0.0015949448 #> 2024-04-24  0.0020719752 #> 2024-04-25  0.0031343476 #> 2024-04-26  0.0020836428 #> 2024-04-27 -0.0020425228 #> 2024-04-28 -0.0002816032 #> 2024-04-29 -0.0011687944        # Taylor Schwert GARCH(1,1) - this belongs to the family of APARCH Models    spec = garchSpec(model = list(delta = 1))    garchSim(spec, n = 10) #> GMT  #>                    garch #> 2024-04-20 -4.009875e-06 #> 2024-04-21 -7.730200e-06 #> 2024-04-22  9.493940e-06 #> 2024-04-23  1.129811e-06 #> 2024-04-24  1.523020e-05 #> 2024-04-25 -1.575024e-06 #> 2024-04-26 -7.708138e-06 #> 2024-04-27 -1.477749e-06 #> 2024-04-28 -8.557498e-06 #> 2024-04-29 -5.101195e-06        # AR(1)-t-APARCH(2, 1) - a little bit more complex specification ...    spec = garchSpec(model = list(mu = 1.0e-4, ar = 0.5, omega = 1.0e-6,         alpha = c(0.10, 0.05), gamma = c(0, 0), beta = 0.8, delta = 1.8,         shape = 4, skew = 0.85), cond.dist = \"sstd\")    garchSim(spec, n = 10) #> GMT  #>                    garch #> 2024-04-20  0.0001359655 #> 2024-04-21  0.0005524952 #> 2024-04-22  0.0018123402 #> 2024-04-23 -0.0079753569 #> 2024-04-24 -0.0187944795 #> 2024-04-25 -0.0103353483 #> 2024-04-26 -0.0088322302 #> 2024-04-27 -0.0128158606 #> 2024-04-28  0.0044420012 #> 2024-04-29  0.0004834796     garchSim(spec, n = 10, extended = TRUE) #> GMT  #>                    garch       sigma        eps #> 2024-04-20 -0.0039057370 0.001831888 -2.6544277 #> 2024-04-21 -0.0030935270 0.002266588 -0.5473682 #> 2024-04-22 -0.0025168619 0.002376449 -0.4502931 #> 2024-04-23  0.0011837586 0.002230510  1.0500689 #> 2024-04-24  0.0015200149 0.002207861  0.3750850 #> 2024-04-25  0.0023305544 0.002124541  0.6921715 #> 2024-04-26  0.0008536017 0.002035029 -0.2022946 #> 2024-04-27 -0.0004914010 0.001923368 -0.5293849 #> 2024-04-28  0.0009323699 0.001827788  0.5898224 #> 2024-04-29 -0.0062338241 0.001766998 -3.8483397"},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchSpec.html","id":null,"dir":"Reference","previous_headings":"","what":"Univariate GARCH/APARCH time series specification — garchSpec","title":"Univariate GARCH/APARCH time series specification — garchSpec","text":"Specifies univariate ARMA-GARCH ARMA-APARCH time series model.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchSpec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Univariate GARCH/APARCH time series specification — garchSpec","text":"","code":"garchSpec(model = list(), presample = NULL,      cond.dist = c(\"norm\", \"ged\", \"std\", \"snorm\", \"sged\", \"sstd\"),      rseed = NULL)"},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchSpec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Univariate GARCH/APARCH time series specification — garchSpec","text":"model list GARCH model parameters, see section ‘Details’.     default model=list() specifies Bollerslev's      GARCH(1,1) model normal conditional distributed innovations. presample numeric three column matrix start values series,      innovations, conditional variances.      ARMA(m,n)-GARCH(p,q) process number rows must least      max(m,n,p,q)+1, longer presamples truncated. Note, presamples     initialized normal-GARCH(p,q) process. cond.dist character string naming desired conditional distribution.     Valid values \"norm\", \"ged\", \"std\",      \"snorm\", \"sged\", \"sstd\". default value      \"norm\", standard normal distribution. rseed single integer argument, seed intitialization     random number generator innovations.     rseed=NULL,  default, state random     number generator touched function.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchSpec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Univariate GARCH/APARCH time series specification — garchSpec","text":"garchSpec specifies GARCH APARCH time series model   can used simulating artificial GARCH /APARCH time   series. useful testing GARCH parameter estimation   results, since model parameters known well specified. Argument model list model parameters. GARCH   part model :  omega constant coefficient variance       equation, default 1e-6; alpha value vector autoregressive       coefficients, default 0.1, specifying model order 1; beta value vector variance coefficients,       default 0.8, specifying model order 1. model APARCH, following additional parameters   available:  delta positive number, power sigma volatility       equation, 2 GARCH models; gamma leverage parameters, vector length       alpha, containing numbers interval \\((0,1)\\). values linear part (conditional mean) :  mu mean value, default NULL; ar autoregressive ARMA coefficients, default NULL; ma moving average ARMA coefficients, default NULL. parameters conditional distributions :  skew skewness parameter (also named \"xi\"),       default 0.9, effective \"dsnorm\",       \"dsged\", \"dsstd\" skewed conditional       distributions; shape shape parameter (also named \"nu\"),       default 2 \"dged\" \"dsged\", default       4 \"dstd\" \"dsstd\" conditional       distributions. example, specifying subset AR(5[1,5])-GARCH(2,1) model   standardized Student-t distribution four degrees freedom   return following printed output:  interpretation follows.  ‘Formula’ describes   formula expression specifying generating process, ‘Model’   lists associated model parameters, ‘Distribution’ type   conditional distribution function use,   ‘Distributional Parameters’ lists distributional parameter   (), ‘Presample’ shows presample input matrix. specified presample = NULL argument list,   presample generated automatically default   norm-AR()-GARCH() process.","code":"garchSpec(model = list(ar = c(0.5,0,0,0,0.1), alpha =               c(0.1, 0.1), beta = 0.75, shape = 4), cond.dist = \"std\")                    Formula:           ~ ar(5) + garch(2, 1)           Model:           ar:    0.5 0 0 0 0.1            omega: 1e-06            alpha: 0.1 0.1            beta:  0.75           Distribution:             std           Distributional Parameter:            nu = 4           Presample:              time          z     h y           0     0 -0.3262334 2e-05 0           -1   -1  1.3297993 2e-05 0           -2   -2  1.2724293 2e-05 0           -3   -3  0.4146414 2e-05 0           -4   -4 -1.5399500 2e-05 0"},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchSpec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Univariate GARCH/APARCH time series specification — garchSpec","text":"object class \"fGARCHSPEC\"","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchSpec.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Univariate GARCH/APARCH time series specification — garchSpec","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/garchSpec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Univariate GARCH/APARCH time series specification — garchSpec","text":"","code":"# Normal Conditional Distribution: spec = garchSpec() spec #>  #> Formula:  #>  ~ garch(1, 1) #> Model: #>  omega: 1e-06 #>  alpha: 0.1 #>  beta:  0.8 #> Distribution:  #>  norm #> Presample:  #>   time          z     h y #> 1    0 -0.6057703 1e-05 0  # Skewed Normal Conditional Distribution: spec = garchSpec(model = list(skew = 0.8), cond.dist = \"snorm\") spec #>  #> Formula:  #>  ~ garch(1, 1) #> Model: #>  omega: 1e-06 #>  alpha: 0.1 #>  beta:  0.8 #> Distribution:  #>  snorm #> Distributional Parameters:  #>  xi = 0.8 #> Presample:  #>   time         z     h y #> 1    0 0.8218844 1e-05 0  # Skewed GED Conditional Distribution: spec = garchSpec(model = list(skew = 0.9, shape = 4.8), cond.dist = \"sged\") spec #>  #> Formula:  #>  ~ garch(1, 1) #> Model: #>  omega: 1e-06 #>  alpha: 0.1 #>  beta:  0.8 #> Distribution:  #>  sged #> Distributional Parameters:  #>  nu = 4.8  xi = 0.9 #> Presample:  #>   time          z     h y #> 1    0 -0.6623704 1e-05 0     ## More specifications ...  # Default GARCH(1,1) - uses default parameter settings garchSpec(model = list()) #>  #> Formula:  #>  ~ garch(1, 1) #> Model: #>  omega: 1e-06 #>  alpha: 0.1 #>  beta:  0.8 #> Distribution:  #>  norm #> Presample:  #>   time        z     h y #> 1    0 -1.67233 1e-05 0  # ARCH(2) - use default omega and specify alpha, set beta=0! garchSpec(model = list(alpha = c(0.2, 0.4), beta = 0)) #>  #> Formula:  #>  ~ arch(2) #> Model: #>  omega: 1e-06 #>  alpha: 0.2 0.4 #> Distribution:  #>  norm #> Presample:  #>   time          z       h y #> 1   -1 -0.3349619 2.5e-06 0 #> 2    0  1.5232437 2.5e-06 0  # AR(1)-ARCH(2) - use default mu, omega garchSpec(model = list(ar = 0.5, alpha = c(0.3, 0.4), beta = 0)) #>  #> Formula:  #>  ~ ar(1) + arch(2) #> Model: #>  ar:    0.5 #>  omega: 1e-06 #>  alpha: 0.3 0.4 #> Distribution:  #>  norm #> Presample:  #>   time          z            h y #> 1   -1  1.6675418 3.333333e-06 0 #> 2    0 -0.7480848 3.333333e-06 0  # AR([1,5])-GARCH(1,1) - use default garch values and subset ar[.] garchSpec(model = list(mu = 0.001, ar = c(0.5,0,0,0,0.1))) #>  #> Formula:  #>  ~ ar(5) + garch(1, 1) #> Model: #>  ar:    0.5 0 0 0 0.1 #>  mu:    0.001 #>  omega: 1e-06 #>  alpha: 0.1 #>  beta:  0.8 #> Distribution:  #>  norm #> Presample:  #>   time          z     h      y #> 1   -4 -1.4612920 1e-05 0.0025 #> 2   -3 -1.3560417 1e-05 0.0025 #> 3   -2 -2.2308896 1e-05 0.0025 #> 4   -1  0.3025817 1e-05 0.0025 #> 5    0 -0.5651775 1e-05 0.0025  # ARMA(1,2)-GARCH(1,1) - use default garch values garchSpec(model = list(ar = 0.5, ma = c(0.3, -0.3)))   #>  #> Formula:  #>  ~ arma(1, 2) + garch(1, 1) #> Model: #>  ar:    0.5 #>  ma:    0.3 -0.3 #>  omega: 1e-06 #>  alpha: 0.1 #>  beta:  0.8 #> Distribution:  #>  norm #> Presample:  #>   time         z     h y #> 1   -1 0.5536471 1e-05 0 #> 2    0 1.1697037 1e-05 0  # GARCH(1,1) - use default omega and specify alpha/beta garchSpec(model = list(alpha = 0.2, beta = 0.7)) #>  #> Formula:  #>  ~ garch(1, 1) #> Model: #>  omega: 1e-06 #>  alpha: 0.2 #>  beta:  0.7 #> Distribution:  #>  norm #> Presample:  #>   time         z     h y #> 1    0 0.5095482 1e-05 0  # GARCH(1,1) - specify omega/alpha/beta garchSpec(model = list(omega = 1e-6, alpha = 0.1, beta = 0.8)) #>  #> Formula:  #>  ~ garch(1, 1) #> Model: #>  omega: 1e-06 #>  alpha: 0.1 #>  beta:  0.8 #> Distribution:  #>  norm #> Presample:  #>   time          z     h y #> 1    0 0.05731502 1e-05 0  # GARCH(1,2) - use default omega and specify alpha[1]/beta[2] garchSpec(model = list(alpha = 0.1, beta = c(0.4, 0.4))) #>  #> Formula:  #>  ~ garch(1, 2) #> Model: #>  omega: 1e-06 #>  alpha: 0.1 #>  beta:  0.4 0.4 #> Distribution:  #>  norm #> Presample:  #>   time         z     h y #> 1   -1 0.1823210 1e-05 0 #> 2    0 0.9699398 1e-05 0  # GARCH(2,1) - use default omega and specify alpha[2]/beta[1] garchSpec(model = list(alpha = c(0.12, 0.04), beta = 0.08)) #>  #> Formula:  #>  ~ garch(2, 1) #> Model: #>  omega: 1e-06 #>  alpha: 0.12 0.04 #>  beta:  0.08 #> Distribution:  #>  norm #> Presample:  #>   time        z            h y #> 1   -1 2.031063 1.315789e-06 0 #> 2    0 0.196474 1.315789e-06 0  # snorm-ARCH(1) - use defaults with skew Normal garchSpec(model = list(beta = 0, skew = 0.8), cond.dist = \"snorm\") #>  #> Formula:  #>  ~ arch(1) #> Model: #>  omega: 1e-06 #>  alpha: 0.1 #> Distribution:  #>  snorm #> Distributional Parameters:  #>  xi = 0.8 #> Presample:  #>   time        z            h y #> 1    0 1.253445 1.111111e-06 0  # sged-GARCH(1,1) - using defaults with skew GED garchSpec(model = list(skew = 0.93, shape = 3), cond.dist = \"sged\") #>  #> Formula:  #>  ~ garch(1, 1) #> Model: #>  omega: 1e-06 #>  alpha: 0.1 #>  beta:  0.8 #> Distribution:  #>  sged #> Distributional Parameters:  #>  nu = 3  xi = 0.93 #> Presample:  #>   time          z     h y #> 1    0 -0.5261311 1e-05 0  # Taylor Schwert GARCH(1,1) - this belongs to the family of APARCH Models garchSpec(model = list(delta = 1)) #>  #> Formula:  #>  ~ aparch(1, 1) #> Model: #>  omega: 1e-06 #>  alpha: 0.1 #>  beta:  0.8 #>  delta: 1 #> Distribution:  #>  norm #> Presample:  #>   time         z     h y #> 1    0 0.1461728 1e-05 0  # AR(1)-t-APARCH(2, 1) - a little bit more complex specification ... garchSpec(model = list(mu = 1.0e-4, ar = 0.5, omega = 1.0e-6,      alpha = c(0.10, 0.05), gamma = c(0, 0), beta = 0.8, delta = 1.8,      shape = 4, skew = 0.85), cond.dist = \"sstd\") #>  #> Formula:  #>  ~ ar(1) + aparch(2, 1) #> Model: #>  ar:    0.5 #>  mu:    1e-04 #>  omega: 1e-06 #>  alpha: 0.1 0.05 #>  beta:  0.8 #>  delta: 1.8 #> Distribution:  #>  sstd #> Distributional Parameters:  #>  nu = 4  xi = 0.85 #> Presample:  #>   time         z     h     y #> 1   -1 0.3192643 2e-05 2e-04 #> 2    0 0.2430710 2e-05 2e-04"},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-coef.html","id":null,"dir":"Reference","previous_headings":"","what":"GARCH coefficients methods — coef-methods","title":"GARCH coefficients methods — coef-methods","text":"Coefficients methods coef() GARCH Models.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-coef.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"GARCH coefficients methods — coef-methods","text":"Methods coef defined package fGarch: object = \"fGARCH\" Extractor function coefficients fitted       GARCH model. object = \"fGARCHSPEC\" Extractor function coefficients GARCH       specification structure.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-coef.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"GARCH coefficients methods — coef-methods","text":"coef generic function extracts coefficients   objects returned modeling functions.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-coef.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"GARCH coefficients methods — coef-methods","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-coef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GARCH coefficients methods — coef-methods","text":"","code":"## garchSpec -    # Use default parameters beside alpha:    spec = garchSpec(model = list(alpha = c(0.05, 0.05)))    spec #>  #> Formula:  #>  ~ garch(2, 1) #> Model: #>  omega: 1e-06 #>  alpha: 0.05 0.05 #>  beta:  0.8 #> Distribution:  #>  norm #> Presample:  #>   time          z     h y #> 1   -1  1.6811273 1e-05 0 #> 2    0 -0.3272859 1e-05 0    coef(spec) #>  omega alpha1 alpha2 gamma1 gamma2   beta     mu     ar     ma  delta  #>  1e-06  5e-02  5e-02  0e+00  0e+00  8e-01  0e+00  0e+00  0e+00  2e+00  #> attr(,\"distribution\") #> [1] \"norm\"  ## garchSim -    # Simulate an univariate \"timeSeries\" series from specification 'spec':    x = garchSim(spec, n = 2000)    x = x[,1]  ## garchFit --    fit = garchFit( ~ garch(1, 1), data = x, trace = FALSE)  ## coef -    coef(fit) #>            mu         omega        alpha1         beta1  #> -3.191295e-05  1.102188e-06  6.839252e-02  8.106040e-01"},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-fitted.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract GARCH model fitted values — fitted-methods","title":"Extract GARCH model fitted values — fitted-methods","text":"Extracts fitted values fitted GARCH object.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-fitted.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Extract GARCH model fitted values — fitted-methods","text":"Methods fitted defined package fGarch: object = \"fGARCH\" Extractor function fitted values.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-fitted.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract GARCH model fitted values — fitted-methods","text":"method \"fGARCH\" objects extracts @fitted   value slot object class \"fGARCH\" returned   function garchFit.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-fitted.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract GARCH model fitted values — fitted-methods","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-fitted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract GARCH model fitted values — fitted-methods","text":"","code":"## see examples for 'residuals()'"},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract GARCH model formula — formula-methods","title":"Extract GARCH model formula — formula-methods","text":"Extracts formula formula GARCH object.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-formula.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Extract GARCH model formula — formula-methods","text":"Methods formula defined package fGarch: object = \"fGARCH\" Extractor function formula expression.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-formula.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract GARCH model formula — formula-methods","text":"formula generic function extracts formula   expression objects returned modeling functions. \"fGARCH\" method extracts @formula expression   slot object class \"fGARCH\" returned   function garchFit. returned formula always left hand side. argument   data univariate time series name specified   series, left hand side assigned name   data.set. multivariate case rectangular data object   must always column names, otherwise fitting stopped   error message class returned value depends input     function garchFit created object. returned     value always class input object     argument data function garchFit, .e.     fit \"timeSeries\" object, get back      function fitted also \"timeSeries\" object,      fit object class \"zoo\", get back      \"zoo\" object. holds \"numeric\"     vector, \"data.frame\", objects class     \"ts\", \"mts\". contrast, slot returns independent class      data input always numeric vector, .e. function      call rslot(object, \"fitted\") return numeric vector.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-formula.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extract GARCH model formula — formula-methods","text":"(GNB) Contrary description returned value   \"fGARCH\" method, always \"numeric\". TODO: either implement documented behaviour fix   documentation.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-formula.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract GARCH model formula — formula-methods","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract GARCH model formula — formula-methods","text":"","code":"## garchFit -    fit = garchFit(~garch(1, 1), data = garchSim(), trace = FALSE)     ## formula -     formula(fit) #> data ~ garch(1, 1) #> attr(,\"data\") #> [1] \"data = garchSim()\" #> <environment: 0x569a13451430>  ## A Bivariate series and mis-specified formula:    x = garchSim(n = 500)    y = garchSim(n = 500)    z = cbind(x, y)    colnames(z) #> [1] \"garch.1\" \"garch.2\"    class(z) #> [1] \"timeSeries\" #> attr(,\"package\") #> [1] \"timeSeries\"    if (FALSE) {    garchFit(z ~garch(1, 1), data = z, trace = FALSE)    }    # Returns:    # Error in .garchArgsParser(formula = formula, data = data, trace = FALSE) :      #   Formula and data units do not match.     ## Doubled column names in data set - formula can't fit:    colnames(z) <- c(\"x\", \"x\")    z[1:6,] #> GMT  #>                        x             x #> 2022-12-17 -0.0023426733  0.0026281998 #> 2022-12-18  0.0012113489 -0.0004620617 #> 2022-12-19  0.0001135257  0.0043161485 #> 2022-12-20 -0.0042403482 -0.0015096423 #> 2022-12-21 -0.0093567474  0.0013723818 #> 2022-12-22  0.0026138964 -0.0047791439    if (FALSE) {    garchFit(x ~garch(1, 1), data = z, trace = FALSE)    }    # Again the error will be noticed:    # Error in garchFit(x ~ garch(1, 1), data = z) :     #   Column names of data are not unique.  ## Missing column names in data set - formula can't fit:    z.mat <- as.matrix(z)    colnames(z.mat) <- NULL    z.mat[1:6,] #>                     [,1]          [,2] #> 2022-12-17 -0.0023426733  0.0026281998 #> 2022-12-18  0.0012113489 -0.0004620617 #> 2022-12-19  0.0001135257  0.0043161485 #> 2022-12-20 -0.0042403482 -0.0015096423 #> 2022-12-21 -0.0093567474  0.0013723818 #> 2022-12-22  0.0026138964 -0.0047791439    if (FALSE) {    garchFit(x ~ garch(1, 1), data = z.mat, trace = FALSE)    }    # Again the error will be noticed:    # Error in .garchArgsParser(formula = formula, data = data, trace = FALSE) :     #   Formula and data units do not match"},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-plot.html","id":null,"dir":"Reference","previous_headings":"","what":"GARCH plot methods — plot-methods","title":"GARCH plot methods — plot-methods","text":"Plot methods GARCH modelling.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GARCH plot methods — plot-methods","text":"","code":"# S4 method for fGARCH,missing plot(x, which = \"ask\", ...)"},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GARCH plot methods — plot-methods","text":"x object class \"fGARCH\". character string vector positive integers specifying     plot(s) displayed, see section ‘Details’.  ... optional arguments passed.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GARCH plot methods — plot-methods","text":"plot method \"fGARCH\" objects offers selection   diagnostic, exploratory, presentation plots menu.   Argument can used request specific plots.    particularly useful scripts. length larger one, requested plots   produced. useful, graphics window split   beforehand subwindows, e.g., using par(mfrow = ...),   par(mfcol = ...), layout() (see section   ‘Examples’). done, last plot   visible. following graphs available:","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"GARCH plot methods — plot-methods","text":"Diethelm Wuertz Rmetrics R-port; VaR ES graphs added Georgi N. Boshnakov v4033.92","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GARCH plot methods — plot-methods","text":"","code":"## simulate a Garch(1,1) time series x <- garchSim(n = 200) head(x)  #> GMT  #>                   garch #> 2023-10-13  0.007522375 #> 2023-10-14 -0.001628817 #> 2023-10-15  0.003737262 #> 2023-10-16  0.004705047 #> 2023-10-17  0.001966999 #> 2023-10-18 -0.005850769  ## fit GARCH(1,1) model fit <- garchFit(formula = ~ garch(1, 1), data = x, trace = FALSE)  if (FALSE) { ## choose plots interactively plot(fit) }     ## Batch Plot: plot(fit, which = 3)  ## a 2 by 2 matrix of plots op <- par(mfrow = c(2,2))          # prepare 2x2 window plot(fit, which = c(10, 11, 3, 16)) # plot  par(op)                            # restore the previous layout"},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-predict.html","id":null,"dir":"Reference","previous_headings":"","what":"GARCH prediction function — predict-methods","title":"GARCH prediction function — predict-methods","text":"Predicts time series fitted GARCH object.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GARCH prediction function — predict-methods","text":"","code":"# S4 method for fGARCH predict(object, n.ahead = 10, trace = FALSE, mse = c(\"cond\",\"uncond\"),         plot=FALSE, nx=NULL, crit_val=NULL, conf=NULL, ..., p_loss = NULL)"},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GARCH prediction function — predict-methods","text":"n.ahead integer value, denoting number steps     forecasted, default 10. object object class \"fGARCH\" returned     function garchFit. trace logical flag. prediction process traced?     default trace=FALSE. mse set \"cond\", meanError defined     conditional mean errors     \\(\\sqrt{E_t[x_{t+h}-E_t(x_{t+h})]^2}\\). set \"uncond\",     defined \\(\\sqrt{E[x_{t+h}-E_t(x_{t+h})]^2}\\). plot set TRUE, confidence intervals     computed plotted nx number observations plotted along     predictions. default round(n*0.25), n     sample size. crit_val critical values confidence intervals     plot set TRUE. intervals defined     \\(\\hat{x}_{t+h}\\) + crit_val[2] * meanError     \\(\\hat{x}_{t+h}\\) + crit_val[1] * meanError two critical     values provided \\(\\hat{x}_{t+h} \\pm\\) crit_val *     meanError one given. provide critical     values, computed automatically. conf confidence level confidence intervals     crit_val provided.  default set 0.95.     critical values computed using conditional distribution     chosen create object garchFit     using shape skew parameters.     conditionnal distribution set \"QMLE\", critical     values computed using empirical distribution     standardized residuals. ... additional arguments passed. p_loss null, compute predictions VaR ES loss level     p_loss (typically, 0.05 0.01).","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-predict.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GARCH prediction function — predict-methods","text":"predictions returned data frame columns   \"meanForecast\", \"meanError\",   \"standardDeviation\". Row h contains predictions   horizon h (, n.ahead rows total). plot = TRUE, data frame contain also prediction   limits horizon columns lowerInterval   upperInterval. p_loss NULL, predictions Value--Risk (VaR)   Expected Shortfall (ES) returned columns VaR   ES. data frame attribute \"p_loss\" containing   p_loss. Typical values p_loss 0.01 0.05. somewhat experimental arguments returned   values may change.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GARCH prediction function — predict-methods","text":"data frame containing n.ahead rows 3 7 columns,   see section ‘Details’","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-predict.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"GARCH prediction function — predict-methods","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GARCH prediction function — predict-methods","text":"","code":"## Parameter Estimation of Default GARCH(1,1) Model set.seed(123) fit = garchFit(~ garch(1, 1), data = garchSim(), trace = FALSE) fit #>  #> Title: #>  GARCH Modelling  #>  #> Call: #>  garchFit(formula = ~garch(1, 1), data = garchSim(), trace = FALSE)  #>  #> Mean and Variance Equation: #>  data ~ garch(1, 1) #> <environment: 0x569a0eaa17a0> #>  [data = garchSim()] #>  #> Conditional Distribution: #>  norm  #>  #> Coefficient(s): #>          mu        omega       alpha1        beta1   #> -1.5658e-05   3.1101e-06   2.8879e-01   4.0817e-01   #>  #> Std. Errors: #>  based on Hessian  #>  #> Error Analysis: #>          Estimate  Std. Error  t value Pr(>|t|)   #> mu     -1.566e-05   2.637e-04   -0.059    0.953   #> omega   3.110e-06   1.874e-06    1.660    0.097 . #> alpha1  2.888e-01   1.808e-01    1.597    0.110   #> beta1   4.082e-01   2.777e-01    1.470    0.142   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Log Likelihood: #>  440.3751    normalized:  4.403751  #>  #> Description: #>  Tue Apr 30 14:51:54 2024 by user: georgi  #>   ## predict predict(fit, n.ahead = 10) #>     meanForecast   meanError standardDeviation #> 1  -1.565763e-05 0.004533622       0.004533622 #> 2  -1.565763e-05 0.004175561       0.004175561 #> 3  -1.565763e-05 0.003906646       0.003906646 #> 4  -1.565763e-05 0.003707706       0.003707706 #> 5  -1.565763e-05 0.003562489       0.003562489 #> 6  -1.565763e-05 0.003457674       0.003457674 #> 7  -1.565763e-05 0.003382701       0.003382701 #> 8  -1.565763e-05 0.003329450       0.003329450 #> 9  -1.565763e-05 0.003291827       0.003291827 #> 10 -1.565763e-05 0.003265348       0.003265348 predict(fit, n.ahead = 10, mse=\"uncond\") #>     meanForecast  meanError standardDeviation #> 1  -1.565763e-05 0.00305647       0.004533622 #> 2  -1.565763e-05 0.00305647       0.004175561 #> 3  -1.565763e-05 0.00305647       0.003906646 #> 4  -1.565763e-05 0.00305647       0.003707706 #> 5  -1.565763e-05 0.00305647       0.003562489 #> 6  -1.565763e-05 0.00305647       0.003457674 #> 7  -1.565763e-05 0.00305647       0.003382701 #> 8  -1.565763e-05 0.00305647       0.003329450 #> 9  -1.565763e-05 0.00305647       0.003291827 #> 10 -1.565763e-05 0.00305647       0.003265348  ## predict with plotting: critical values = +/- 2 predict(fit, n.ahead = 10, plot=TRUE, crit_val = 2) #>     meanForecast   meanError standardDeviation lowerInterval upperInterval #> 1  -1.565763e-05 0.004533622       0.004533622  -0.009082903   0.009051587 #> 2  -1.565763e-05 0.004175561       0.004175561  -0.008366779   0.008335464 #> 3  -1.565763e-05 0.003906646       0.003906646  -0.007828949   0.007797634 #> 4  -1.565763e-05 0.003707706       0.003707706  -0.007431070   0.007399755 #> 5  -1.565763e-05 0.003562489       0.003562489  -0.007140636   0.007109321 #> 6  -1.565763e-05 0.003457674       0.003457674  -0.006931005   0.006899690 #> 7  -1.565763e-05 0.003382701       0.003382701  -0.006781060   0.006749745 #> 8  -1.565763e-05 0.003329450       0.003329450  -0.006674558   0.006643242 #> 9  -1.565763e-05 0.003291827       0.003291827  -0.006599311   0.006567995 #> 10 -1.565763e-05 0.003265348       0.003265348  -0.006546354   0.006515038  ## include also VaR and ES at 5% predict(fit, n.ahead = 10, plot=TRUE, crit_val = 2, p_loss = 0.05)  #>     meanForecast   meanError standardDeviation lowerInterval upperInterval #> 1  -1.565763e-05 0.004533622       0.004533622  -0.009082903   0.009051587 #> 2  -1.565763e-05 0.004175561       0.004175561  -0.008366779   0.008335464 #> 3  -1.565763e-05 0.003906646       0.003906646  -0.007828949   0.007797634 #> 4  -1.565763e-05 0.003707706       0.003707706  -0.007431070   0.007399755 #> 5  -1.565763e-05 0.003562489       0.003562489  -0.007140636   0.007109321 #> 6  -1.565763e-05 0.003457674       0.003457674  -0.006931005   0.006899690 #> 7  -1.565763e-05 0.003382701       0.003382701  -0.006781060   0.006749745 #> 8  -1.565763e-05 0.003329450       0.003329450  -0.006674558   0.006643242 #> 9  -1.565763e-05 0.003291827       0.003291827  -0.006599311   0.006567995 #> 10 -1.565763e-05 0.003265348       0.003265348  -0.006546354   0.006515038 #>            VaR          ES #> 1  0.007472803 0.009367219 #> 2  0.006883844 0.008628640 #> 3  0.006441518 0.008073946 #> 4  0.006114292 0.007663591 #> 5  0.005875431 0.007364050 #> 6  0.005703025 0.007147846 #> 7  0.005579706 0.006993199 #> 8  0.005492116 0.006883357 #> 9  0.005430230 0.006805750 #> 10 0.005386677 0.006751133  ## predict with plotting: automatic critical values  ## for different conditional distributions set.seed(321) fit2 = garchFit(~ garch(1, 1), data = garchSim(), trace=FALSE, cond.dist=\"sged\")  ## 95% confidence level predict(fit2, n.ahead=20, plot=TRUE)   #>     meanForecast   meanError standardDeviation lowerInterval upperInterval #> 1  -0.0001011749 0.002792102       0.002792102  -0.005672091   0.005183726 #> 2  -0.0001011749 0.002697756       0.002697756  -0.005483848   0.005005147 #> 3  -0.0001011749 0.002657046       0.002657046  -0.005402621   0.004928091 #> 4  -0.0001011749 0.002639724       0.002639724  -0.005368060   0.004895304 #> 5  -0.0001011749 0.002632399       0.002632399  -0.005353446   0.004881440 #> 6  -0.0001011749 0.002629310       0.002629310  -0.005347283   0.004875594 #> 7  -0.0001011749 0.002628009       0.002628009  -0.005344687   0.004873131 #> 8  -0.0001011749 0.002627462       0.002627462  -0.005343594   0.004872094 #> 9  -0.0001011749 0.002627231       0.002627231  -0.005343134   0.004871658 #> 10 -0.0001011749 0.002627134       0.002627134  -0.005342940   0.004871474 #> 11 -0.0001011749 0.002627093       0.002627093  -0.005342858   0.004871397 #> 12 -0.0001011749 0.002627076       0.002627076  -0.005342824   0.004871364 #> 13 -0.0001011749 0.002627069       0.002627069  -0.005342810   0.004871350 #> 14 -0.0001011749 0.002627066       0.002627066  -0.005342804   0.004871345 #> 15 -0.0001011749 0.002627064       0.002627064  -0.005342801   0.004871342 #> 16 -0.0001011749 0.002627064       0.002627064  -0.005342800   0.004871341 #> 17 -0.0001011749 0.002627063       0.002627063  -0.005342799   0.004871341 #> 18 -0.0001011749 0.002627063       0.002627063  -0.005342799   0.004871340 #> 19 -0.0001011749 0.002627063       0.002627063  -0.005342799   0.004871340 #> 20 -0.0001011749 0.002627063       0.002627063  -0.005342799   0.004871340  set.seed(444) fit3 = garchFit(~ garch(1, 1), data = garchSim(), trace=FALSE, cond.dist=\"QMLE\")  ## 90% confidence level and nx=100 predict(fit3, n.ahead=20, plot=TRUE, conf=.9, nx=100)   #>    meanForecast   meanError standardDeviation lowerInterval upperInterval #> 1  0.0001058131 0.003189535       0.003189535  -0.005507703   0.005293788 #> 2  0.0001058131 0.003272780       0.003272780  -0.005654212   0.005429191 #> 3  0.0001058131 0.003345421       0.003345421  -0.005782059   0.005547347 #> 4  0.0001058131 0.003409029       0.003409029  -0.005894007   0.005650808 #> 5  0.0001058131 0.003464885       0.003464885  -0.005992313   0.005741661 #> 6  0.0001058131 0.003514051       0.003514051  -0.006078843   0.005821632 #> 7  0.0001058131 0.003557413       0.003557413  -0.006155161   0.005892165 #> 8  0.0001058131 0.003595723       0.003595723  -0.006222585   0.005954477 #> 9  0.0001058131 0.003629617       0.003629617  -0.006282237   0.006009608 #> 10 0.0001058131 0.003659641       0.003659641  -0.006335079   0.006058444 #> 11 0.0001058131 0.003686266       0.003686266  -0.006381938   0.006101751 #> 12 0.0001058131 0.003709898       0.003709898  -0.006423530   0.006140190 #> 13 0.0001058131 0.003730891       0.003730891  -0.006460477   0.006174336 #> 14 0.0001058131 0.003749551       0.003749551  -0.006493320   0.006204689 #> 15 0.0001058131 0.003766150       0.003766150  -0.006522533   0.006231687 #> 16 0.0001058131 0.003780922       0.003780922  -0.006548531   0.006255714 #> 17 0.0001058131 0.003794074       0.003794074  -0.006571679   0.006277108 #> 18 0.0001058131 0.003805790       0.003805790  -0.006592298   0.006296164 #> 19 0.0001058131 0.003816229       0.003816229  -0.006610671   0.006313144 #> 20 0.0001058131 0.003825534       0.003825534  -0.006627048   0.006328279"},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-residuals.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract GARCH model residuals — residuals-methods","title":"Extract GARCH model residuals — residuals-methods","text":"Extracts residuals fitted GARCH object.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-residuals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract GARCH model residuals — residuals-methods","text":"","code":"# S4 method for fGARCH residuals(object, standardize = FALSE)"},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-residuals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract GARCH model residuals — residuals-methods","text":"object object class \"fGARCH\" returned     garchFit.  standardize logical, indicating residuals standardized.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-residuals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract GARCH model residuals — residuals-methods","text":"\"fGARCH\" method extracts @residuals slot   object class \"fGARCH\" returned function   garchFit optionally standardizes , using conditional   standard deviations.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-residuals.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract GARCH model residuals — residuals-methods","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-residuals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract GARCH model residuals — residuals-methods","text":"","code":"stopifnot(require(\"timeSeries\")) ## Swiss Pension fund Index data(LPP2005REC, package = \"timeSeries\") x <- as.timeSeries(LPP2005REC)  ## Fit LPP40 Bechmark: fit <- garchFit(LPP40 ~ garch(1, 1), data = 100*x, trace = FALSE) fit #>  #> Title: #>  GARCH Modelling  #>  #> Call: #>  garchFit(formula = LPP40 ~ garch(1, 1), data = 100 * x, trace = FALSE)  #>  #> Mean and Variance Equation: #>  LPP40 ~ garch(1, 1) #> <environment: 0x569a0fa68300> #>  [data = 100 * x] #>  #> Conditional Distribution: #>  norm  #>  #> Coefficient(s): #>        mu      omega     alpha1      beta1   #> 0.0491045  0.0083931  0.0881843  0.8016409   #>  #> Std. Errors: #>  based on Hessian  #>  #> Error Analysis: #>         Estimate  Std. Error  t value Pr(>|t|)     #> mu      0.049104    0.013478    3.643 0.000269 *** #> omega   0.008393    0.003493    2.403 0.016268 *   #> alpha1  0.088184    0.035316    2.497 0.012524 *   #> beta1   0.801641    0.071544   11.205  < 2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Log Likelihood: #>  -38.61265    normalized:  -0.1024208  #>  #> Description: #>  Tue Apr 30 14:51:55 2024 by user: georgi  #>   fitted <- fitted(fit) head(fitted) #> 2005-11-01 2005-11-02 2005-11-03 2005-11-04 2005-11-07 2005-11-08  #> 0.04910447 0.04910447 0.04910447 0.04910447 0.04910447 0.04910447  class(fitted) #> [1] \"numeric\"  res <- residuals(fit) head(res) #> [1] -0.02910647 -0.16114487  0.28265033  0.19302033  0.17555663  0.04716633 class(res) #> [1] \"numeric\""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-summary.html","id":null,"dir":"Reference","previous_headings":"","what":"GARCH summary methods — summary-methods","title":"GARCH summary methods — summary-methods","text":"Summary methods GARCH modelling.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-summary.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"GARCH summary methods — summary-methods","text":"Methods summary defined package fGarch: object = \"fGARCH\" Summary function objects class \"fGARCH\".","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-summary.html","id":"how-to-read-a-diagnostic-summary-report-","dir":"Reference","previous_headings":"","what":"How to read a diagnostic summary report?","title":"GARCH summary methods — summary-methods","text":"first five sections return title, call,     mean variance formula, conditional distribution type     standard errors:  next three sections return estimated coefficients     error analysis including standard errors, t values,     probabilities, well log Likelihood values      optimization:  next section provides results standardized residuals     tests, including statistic p values, information     criterion statistic including AIC, BIC, SIC, HQIC:","code":"Title:          GARCH Modelling                   Call:          garchFit(~ garch(1, 1), data = garchSim(), trace = FALSE)                   Mean and Variance Equation:          ~arch(0)                  Conditional Distribution:          norm                   Std. Errors:          based on Hessian Coefficient(s):                   mu         omega        alpha1         beta1           -5.79788e-05   7.93017e-06   1.59456e-01   2.30772e-01                    Error Analysis:                  Estimate  Std. Error  t value Pr(>|t|)         mu     -5.798e-05   2.582e-04   -0.225    0.822         omega   7.930e-06   5.309e-06    1.494    0.135         alpha1  1.595e-01   1.026e-01    1.554    0.120         beta1   2.308e-01   4.203e-01    0.549    0.583                  Log Likelihood:          -843.3991    normalized:  -Inf Standardized Residuals Tests:                                         Statistic p-Value              Jarque-Bera Test   R    Chi^2  0.4172129 0.8117146            Shapiro-Wilk Test  R    W      0.9957817 0.8566985            Ljung-Box Test     R    Q(10)  13.05581  0.2205680            Ljung-Box Test     R    Q(15)  14.40879  0.4947788            Ljung-Box Test     R    Q(20)  38.15456  0.008478302          Ljung-Box Test     R^2  Q(10)  7.619134  0.6659837            Ljung-Box Test     R^2  Q(15)  13.89721  0.5333388            Ljung-Box Test     R^2  Q(20)  15.61716  0.7400728            LM Arch Test       R    TR^2   7.049963  0.8542942                     Information Criterion Statistics:                  AIC      BIC      SIC     HQIC              8.473991 8.539957 8.473212 8.500687"},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-summary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"GARCH summary methods — summary-methods","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GARCH summary methods — summary-methods","text":"","code":"## garchSim -    x = garchSim(n = 200)  ## garchFit -     fit = garchFit(formula = x ~ garch(1, 1), data = x, trace = FALSE)    summary(fit) #>  #> Title: #>  GARCH Modelling  #>  #> Call: #>  garchFit(formula = x ~ garch(1, 1), data = x, trace = FALSE)  #>  #> Mean and Variance Equation: #>  data ~ garch(1, 1) #> <environment: 0x569a0f5e67e0> #>  [data = x] #>  #> Conditional Distribution: #>  norm  #>  #> Coefficient(s): #>         mu       omega      alpha1       beta1   #> 2.5896e-04  4.1606e-07  1.1732e-01  8.2562e-01   #>  #> Std. Errors: #>  based on Hessian  #>  #> Error Analysis: #>         Estimate  Std. Error  t value Pr(>|t|)     #> mu     2.590e-04   1.723e-04    1.503   0.1328     #> omega  4.161e-07   3.378e-07    1.232   0.2181     #> alpha1 1.173e-01   5.679e-02    2.066   0.0388 *   #> beta1  8.256e-01   7.644e-02   10.801   <2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Log Likelihood: #>  904.4709    normalized:  4.522355  #>  #> Description: #>  Tue Apr 30 14:51:55 2024 by user: georgi  #>  #>  #> Standardised Residuals Tests: #>                                  Statistic   p-Value #>  Jarque-Bera Test   R    Chi^2   0.2185727 0.8964737 #>  Shapiro-Wilk Test  R    W       0.9979898 0.9972060 #>  Ljung-Box Test     R    Q(10)   2.0947412 0.9955611 #>  Ljung-Box Test     R    Q(15)   7.7722072 0.9325900 #>  Ljung-Box Test     R    Q(20)  18.3001001 0.5676465 #>  Ljung-Box Test     R^2  Q(10)   9.3682085 0.4975518 #>  Ljung-Box Test     R^2  Q(15)  15.0351706 0.4488868 #>  Ljung-Box Test     R^2  Q(20)  18.6478352 0.5448116 #>  LM Arch Test       R    TR^2   13.1763335 0.3563554 #>  #> Information Criterion Statistics: #>       AIC       BIC       SIC      HQIC  #> -9.004709 -8.938743 -9.005489 -8.978014  #>"},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-volatility.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract GARCH model volatility — volatility-methods","title":"Extract GARCH model volatility — volatility-methods","text":"Extracts volatility fitted GARCH object.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-volatility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract GARCH model volatility — volatility-methods","text":"","code":"# S3 method for fGARCH volatility(object, type = c(\"sigma\", \"h\"), ...)"},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-volatility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract GARCH model volatility — volatility-methods","text":"object object class \"fGARCH\" returned     garchFit().  type character string denoting conditional standard deviations     \"sigma\" variances \"h\" returned.  ... currently used.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-volatility.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract GARCH model volatility — volatility-methods","text":"volatility S3 generic function computation   volatility, see volatility default   method. method \"fGARCH\" objects, described , extracts   volatility slot @sigma.t @h.t   \"fGARCH\" object usually obtained function   garchFit(). class returned value depends input function   garchFit created object. returned value always   class input object argument data   function garchFit, .e. fit \"timeSeries\"   object, get back function fitted also   \"timeSeries\" object, fit object class   \"zoo\", get back \"zoo\" object.   holds \"numeric\" vector, \"data.frame\",   objects class \"ts\", \"mts\". contrast, slot always contains numeric vector,   independently class input data input, .e. function   call slot(object, \"fitted\") return numeric vector.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-volatility.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract GARCH model volatility — volatility-methods","text":"Diethelm Wuertz Rmetrics R-port","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-volatility.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extract GARCH model volatility — volatility-methods","text":"(GNB) Contrary description returned value   \"fGARCH\" method, always \"numeric\". TODO: either implement documented behaviour fix   documentation.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-volatility.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Extract GARCH model volatility — volatility-methods","text":"Methods volatility defined package fGarch: object = \"fGARCH\" Extractor function volatility standard deviation       object class \"fGARCH\".","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/methods-volatility.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract GARCH model volatility — volatility-methods","text":"","code":"## Swiss Pension fund Index -    stopifnot(require(\"timeSeries\")) # need package 'timeSeries'    x = as.timeSeries(data(LPP2005REC, package = \"timeSeries\"))  ## garchFit    fit = garchFit(LPP40 ~ garch(1, 1), data = 100*x, trace = FALSE)    fit #>  #> Title: #>  GARCH Modelling  #>  #> Call: #>  garchFit(formula = LPP40 ~ garch(1, 1), data = 100 * x, trace = FALSE)  #>  #> Mean and Variance Equation: #>  LPP40 ~ garch(1, 1) #> <environment: 0x569a04c83580> #>  [data = 100 * x] #>  #> Conditional Distribution: #>  norm  #>  #> Coefficient(s): #>        mu      omega     alpha1      beta1   #> 0.0491045  0.0083931  0.0881843  0.8016409   #>  #> Std. Errors: #>  based on Hessian  #>  #> Error Analysis: #>         Estimate  Std. Error  t value Pr(>|t|)     #> mu      0.049104    0.013478    3.643 0.000269 *** #> omega   0.008393    0.003493    2.403 0.016268 *   #> alpha1  0.088184    0.035316    2.497 0.012524 *   #> beta1   0.801641    0.071544   11.205  < 2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Log Likelihood: #>  -38.61265    normalized:  -0.1024208  #>  #> Description: #>  Tue Apr 30 14:51:55 2024 by user: georgi  #>   ## volatility -    # Standard Deviation:    vola = volatility(fit, type = \"sigma\")    head(vola) #> [1] 0.2805121 0.2674818 0.2608402 0.2645372 0.2603407 0.2558202    class(vola) #> [1] \"numeric\"    # Variance:    vola = volatility(fit, type = \"h\")    head(vola) #> [1] 0.07868705 0.07154652 0.06803761 0.06997993 0.06777730 0.06544396    class(vola) #> [1] \"numeric\"  ## slot -    vola = slot(fit, \"sigma.t\")    head(vola) #> [1] 0.2805121 0.2674818 0.2608402 0.2645372 0.2603407 0.2558202    class(vola) #> [1] \"numeric\"    vola = slot(fit, \"h.t\")    head(vola) #> [1] 0.07868705 0.07154652 0.06803761 0.06997993 0.06777730 0.06544396    class(vola) #> [1] \"numeric\""},{"path":"https://geobosh.github.io/fGarchDoc/reference/stats-tsdiag.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnostic plots and statistics for fitted GARCH models — stats-tsdiag","title":"Diagnostic plots and statistics for fitted GARCH models — stats-tsdiag","text":"Produce diagnostics fitted GARCH/APARCH models. method offers   several tests, plots autocorrelations partial autocorrelations   standardised conditional residuals, ability control   graphs produced (including interactively), well   layout.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/stats-tsdiag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnostic plots and statistics for fitted GARCH models — stats-tsdiag","text":"","code":"# S3 method for fGARCH tsdiag(object, gof.lag = NULL, ask = FALSE, ..., plot = c(4L, 5L, 7L),         layout = NULL)"},{"path":"https://geobosh.github.io/fGarchDoc/reference/stats-tsdiag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnostic plots and statistics for fitted GARCH models — stats-tsdiag","text":"object object class \"fGARCH\", returned     garchFit. gof.lag maximal lag portmanteau tests. ask TRUE present menu available plots, see Details. ... used. plot TRUE available plots; vector positive integers     specifies subset available plots. layout list arguments graphics::layout plots.     default plots autocorrelations standardised conditional     residuals squares, well QQ-plot fitted     conditional distribution.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/stats-tsdiag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diagnostic plots and statistics for fitted GARCH models — stats-tsdiag","text":"Compute graph diagnostics fitted ARMA-GARCH/APARCH models.  plot can TRUE ask plots vector   positive integers specifying plots consider. Currently   following options available: argument plot length two graphics window split   2 equal subwindows. Argument layout can still used   change .  argument plot length one graphics   window split . interactive sessions, number requested graphs (  specified argument plot) larger number graphs   specified layout (default 3), function makes first   graph presents menu requested plots. Argument layout can used change layout plot,   example put two graphs per plot, see examples. Currently   list arguments layout, see ?layout.   call layout youself, change graphics   device prematurely. computed results returned (invisibly). another   difference stats::tsdiag return .","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/stats-tsdiag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diagnostic plots and statistics for fitted GARCH models — stats-tsdiag","text":"(experimental, may change)   list components: residuals standardised conditional residuals, gof goodness--fit tests, pretending parameters known,  gof_composite goodness--fit tests taking account parameters     estimated.  components actually computed included, rest   NULL absent.","code":""},{"path":"https://geobosh.github.io/fGarchDoc/reference/stats-tsdiag.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Diagnostic plots and statistics for fitted GARCH models — stats-tsdiag","text":"Georgi N. boshnakov","code":""},{"path":[]},{"path":"https://geobosh.github.io/fGarchDoc/reference/stats-tsdiag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagnostic plots and statistics for fitted GARCH models — stats-tsdiag","text":"","code":"set.seed(20230612) x <- garchSim(n = 200) fit <- garchFit(formula = ~ garch(1, 1), data = x, trace = FALSE) fit_test <- tsdiag(fit)  fit_test #>  #> gof: #>                  statistic   p.value #> Anderson-Darling 3.1812694 0.2750755 #> Cramer-vonMises  0.6032679 0.2521133 #>  #> gof_composite: #>                   statistic   p.value #> Anderson-Darling 0.38205009 0.8661955 #> Cramer-vonMises  0.04694483 0.8950729  ## 2x2 matrix with acf of r, r^2 on diag, cor(r,r^2) below it, and qq-plot tsdiag(fit, plot = c(4, 6, 7, 5), layout = list(matrix(1:4, nrow = 2)))"}]
